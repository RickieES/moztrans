/*
 * ImagePanel.java
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 *  except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is MozillaTranslator (Mozilla Localization Tool)
 *
 * The Initial Developer of the Original Code is Henrik Lynggaard Hansen
 *
 * Portions created by Henrik Lynggard Hansen are
 * Copyright (C) Henrik Lynggaard Hansen.
 * All Rights Reserved.
 *
 * Contributor(s):
 * Tsahi Asher <tsahi_75@yahoo.com>
 *
 * Created on 7 December 2006, 19:48
 */

package org.mozillatranslator.gui;

import org.mozillatranslator.io.common.FileUtils;
import org.mozillatranslator.kernel.*;
import javax.swing.*;
import java.io.*;

/**
 * a panel for image EditImagePanel.
 * @author  Tsahi Asher
 */
public class ImagePanel extends javax.swing.JPanel {
    /**
     * Current image file byte data
     */
    protected byte[] imageData; 
  
  /**
   * Creates new form ImagePanel
   * @param image image to display. if image is <code>null</code>, "Picture not
   * loaded" is displayed instead. it would be better to receive an ImageIcon,
   * but then i couldn't send it to FileUtils.saveFile().
   */
  public ImagePanel(byte[] image) {
    initComponents();
    if (image != null) {
      setImage(image);
    }
    else {
      removeImage();
    }
  }

  /**
   *set the image in the panel, and remove text.
   *@param image the image data
   */
  protected void setImage(byte[] image) {
    imageData = image;
    ImageIcon img = new ImageIcon(imageData);
    imageLabel.setIcon(img);
    imageLabel.setText(null);
  }
  
  /**
   *remove the image from the panel. sets the icon to null and replaces it with
   *the text "picture not loaded".
   *TODO: unite with setImage, as setImage(null)
   */
  protected void removeImage() {
    imageData = null;
    imageLabel.setIcon(null);
    imageLabel.setText("Picture not loaded");
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents() {
    titleLabel = new javax.swing.JLabel();
    mainPanel = new javax.swing.JPanel();
    imageLabel = new javax.swing.JLabel();
    buttonsPanel = new javax.swing.JPanel();
    saveButton = new javax.swing.JButton();

    setLayout(new java.awt.BorderLayout());

    titleLabel.setText("Original Image");
    add(titleLabel, java.awt.BorderLayout.NORTH);

    imageLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mozillatranslator/resource/mt_banner.gif")));
    mainPanel.add(imageLabel);

    add(mainPanel, java.awt.BorderLayout.CENTER);

    saveButton.setFont(new java.awt.Font("Dialog", 0, 12));
    saveButton.setText("Save");
    saveButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveButtonActionPerformed(evt);
      }
    });

    buttonsPanel.add(saveButton);

    add(buttonsPanel, java.awt.BorderLayout.SOUTH);

  }// </editor-fold>//GEN-END:initComponents

  private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
    if (imageData != null) {
      File fileSelected;
      JFileChooser chooser = new JFileChooser(".");
      chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
      chooser.setDialogTitle("Save original picture");
      int result = chooser.showSaveDialog(this);
      if (result == JFileChooser.APPROVE_OPTION) {
        try {
          fileSelected = chooser.getSelectedFile();
          FileOutputStream fos = new FileOutputStream(fileSelected);
          FileUtils.saveFile(fos, imageData);
          fos.close();
        }
        catch (IOException e) {
          Kernel.appLog.severe("Cannot save original picture " + e);
          JOptionPane.showMessageDialog(Kernel.mainWindow, "Cannot save original picture " + e,"Error during save", JOptionPane.ERROR_MESSAGE);
        }
      }
    }
  }//GEN-LAST:event_saveButtonActionPerformed
  
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  protected javax.swing.JPanel buttonsPanel;
  protected javax.swing.JLabel imageLabel;
  protected javax.swing.JPanel mainPanel;
  protected javax.swing.JButton saveButton;
  protected javax.swing.JLabel titleLabel;
  // End of variables declaration//GEN-END:variables
  
}
