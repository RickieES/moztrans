/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 *  except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is MozillaTranslator (Mozilla Localization Tool)
 *
 * The Initial Developer of the Original Code is Henrik Lynggaard Hansen
 *
 * Portions created by Henrik Lynggard Hansen are
 * Copyright (C) Henrik Lynggaard Hansen.
 * All Rights Reserved.
 *
 * Contributor(s):
 * Henrik Lynggaard Hansen (Initial Code)
 *
 */

package org.mozillatranslator.gui.dialog;

import java.awt.Font;
import java.io.*;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.Iterator;
import javax.swing.*;
import org.mozillatranslator.kernel.*;
import org.mozillatranslator.util.*;

/**
 * Setup dialog class
 * @author  Henrik Lynggaard
 * @version 1.0
 */
public class SetupDialog extends JDialog {
    /** Creates new form ManageProducts */
    public SetupDialog() {
        super(Kernel.mainWindow, "Setup MozillaTranslator", true);

        csIniCmbModel = getNewCharSetComboBoxModel();
        csOtherCmbModel = getNewCharSetComboBoxModel();
        initComponents();
        JDialogHelper.setupOKCancelHotkeys(this, okButton, cancelButton);
        GuiTools.placeFrameAtCenter(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        generalPanel = new javax.swing.JPanel();
        visualPrefPanel = new javax.swing.JPanel();
        guiShowWhatCheck = new javax.swing.JCheckBox();
        editPhraseFontLabel = new javax.swing.JLabel();
        editPhraseChooseButton = new javax.swing.JButton();
        tableViewFontLabel = new javax.swing.JLabel();
        tableViewChooseButton = new javax.swing.JButton();
        licensePanel = new javax.swing.JPanel();
        generalContributorLabel = new javax.swing.JLabel();
        generalContributorField = new javax.swing.JTextField();
        licensePropertiesLabel = new javax.swing.JLabel();
        licensePropertiesField = new javax.swing.JTextField();
        licensePropertiesButton = new javax.swing.JButton();
        licenseDtdLabel = new javax.swing.JLabel();
        licenseDtdField = new javax.swing.JTextField();
        licenseDtdButton = new javax.swing.JButton();
        keyConnPanel = new javax.swing.JPanel();
        labelPatternLabel = new javax.swing.JLabel();
        akeyPatternLabel = new javax.swing.JLabel();
        ckeyPatternLabel = new javax.swing.JLabel();
        labelPatternField = new javax.swing.JTextField();
        akeyPatternField = new javax.swing.JTextField();
        ckeyPatternField = new javax.swing.JTextField();
        suffixInfoLabel = new javax.swing.JLabel();
        labelCaseCheck = new javax.swing.JCheckBox();
        akeyCaseCheck = new javax.swing.JCheckBox();
        ckeyCaseCheck = new javax.swing.JCheckBox();
        importExportPanel = new javax.swing.JPanel();
        exportingPanel = new javax.swing.JPanel();
        replaceEnUSCheck = new javax.swing.JCheckBox();
        zipPathLabel = new javax.swing.JLabel();
        zipPathTextField = new javax.swing.JTextField();
        zipPathButton = new javax.swing.JButton();
        unzipPathLabel = new javax.swing.JLabel();
        unzipPathTextField = new javax.swing.JTextField();
        unzipPathButton = new javax.swing.JButton();
        useExtZipCheck = new javax.swing.JCheckBox();
        encodingPanel = new javax.swing.JPanel();
        encodingLabel = new javax.swing.JLabel();
        otherLabel = new javax.swing.JLabel();
        othersComboBox = new javax.swing.JComboBox();
        qaPrefs = new javax.swing.JPanel();
        descripLabel = new javax.swing.JLabel();
        ignoredOrigEntLabel = new javax.swing.JLabel();
        origDTDEntField = new javax.swing.JTextField();
        ignoredTrnsEntLabel = new javax.swing.JLabel();
        trnsDTDEntField = new javax.swing.JTextField();
        endingCheckedCharsLabel = new javax.swing.JLabel();
        endingCheckedCharsField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        useSuggCheckBox = new javax.swing.JCheckBox();
        pairedCharsListLabel = new javax.swing.JLabel();
        pairedCharsListField = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        advancedPanel = new javax.swing.JPanel();
        javax.swing.JPanel titlePanel = new javax.swing.JPanel();
        warning1Label = new javax.swing.JLabel();
        warning2Label = new javax.swing.JLabel();
        datamodelPanel = new javax.swing.JPanel();
        datemodelFilenameLabel = new javax.swing.JLabel();
        datamodelFilenameField = new javax.swing.JTextField();
        datamodelClassLabel = new javax.swing.JLabel();
        datamodelClassField = new javax.swing.JTextField();
        loggingPanel = new javax.swing.JPanel();
        loggingSoutCheck = new javax.swing.JCheckBox();
        loggingSerrCheck = new javax.swing.JCheckBox();
        loggingFileCheck = new javax.swing.JCheckBox();
        loggingFileField = new javax.swing.JTextField();
        loggingPopupCheck = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                windowClose(evt);
            }
        });

        okButton.setText("OK");
        okButton.setMaximumSize(new java.awt.Dimension(54, 27));
        okButton.setMinimumSize(new java.awt.Dimension(54, 27));
        okButton.setPreferredSize(new java.awt.Dimension(54, 27));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonPressed(evt);
            }
        });
        buttonPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonPressed(evt);
            }
        });
        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        generalPanel.setFont(new java.awt.Font("Dialog", 1, 12));
        generalPanel.setLayout(new java.awt.GridBagLayout());

        visualPrefPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Chrome View and Query Results", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        visualPrefPanel.setLayout(new java.awt.GridBagLayout());

        guiShowWhatCheck.setFont(new java.awt.Font("Dialog", 0, 12));
        guiShowWhatCheck.setMnemonic('M');
        guiShowWhatCheck.setText("Make ShowWhat dialog visible");
        guiShowWhatCheck.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        visualPrefPanel.add(guiShowWhatCheck, gridBagConstraints);

        editPhraseFontLabel.setText("Font for Edit Phrase dialog");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        visualPrefPanel.add(editPhraseFontLabel, gridBagConstraints);

        editPhraseChooseButton.setText("Choose...");
        editPhraseChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editPhraseChooseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        visualPrefPanel.add(editPhraseChooseButton, gridBagConstraints);

        tableViewFontLabel.setText("Font for table views");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        visualPrefPanel.add(tableViewFontLabel, gridBagConstraints);

        tableViewChooseButton.setText("Choose...");
        tableViewChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableViewChooseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        visualPrefPanel.add(tableViewChooseButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(visualPrefPanel, gridBagConstraints);

        licensePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("License options"));
        licensePanel.setLayout(new java.awt.GridBagLayout());

        generalContributorLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        generalContributorLabel.setText("Default contributor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licensePanel.add(generalContributorLabel, gridBagConstraints);

        generalContributorField.setColumns(30);
        generalContributorField.setText("Name Lastname <e.mail@address.com>");
        generalContributorField.setToolTipText("Fill this box with the name of the contributor to be added to every file in the translated version. Use Advanced / Assign license to file to add specific contributors to specific files.");
        generalContributorField.setPreferredSize(new java.awt.Dimension(334, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licensePanel.add(generalContributorField, gridBagConstraints);

        licensePropertiesLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        licensePropertiesLabel.setText("Properties license");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licensePanel.add(licensePropertiesLabel, gridBagConstraints);

        licensePropertiesField.setColumns(30);
        licensePropertiesField.setText("prop.txt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licensePanel.add(licensePropertiesField, gridBagConstraints);

        licensePropertiesButton.setMnemonic('C');
        licensePropertiesButton.setText("Choose...");
        licensePropertiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                licensePropertiesButtonPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licensePanel.add(licensePropertiesButton, gridBagConstraints);

        licenseDtdLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        licenseDtdLabel.setText("DTD license");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licensePanel.add(licenseDtdLabel, gridBagConstraints);

        licenseDtdField.setColumns(30);
        licenseDtdField.setText("dtd.txt");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licensePanel.add(licenseDtdField, gridBagConstraints);

        licenseDtdButton.setMnemonic('h');
        licenseDtdButton.setText("Choose...");
        licenseDtdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                licenseDtdButtonPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        licensePanel.add(licenseDtdButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        generalPanel.add(licensePanel, gridBagConstraints);

        tabbedPane.addTab("General", generalPanel);

        keyConnPanel.setLayout(new java.awt.GridBagLayout());

        labelPatternLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        labelPatternLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        labelPatternLabel.setText("Label suffixes:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        keyConnPanel.add(labelPatternLabel, gridBagConstraints);

        akeyPatternLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        akeyPatternLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        akeyPatternLabel.setText("Accesskeys suffixes:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        keyConnPanel.add(akeyPatternLabel, gridBagConstraints);

        ckeyPatternLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        ckeyPatternLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ckeyPatternLabel.setText("Commandkeys suffixes:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        keyConnPanel.add(ckeyPatternLabel, gridBagConstraints);

        labelPatternField.setText("Label patterns");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        keyConnPanel.add(labelPatternField, gridBagConstraints);

        akeyPatternField.setText("Accesskeys patterns");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        keyConnPanel.add(akeyPatternField, gridBagConstraints);

        ckeyPatternField.setText("Commandkeys patterns");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        keyConnPanel.add(ckeyPatternField, gridBagConstraints);

        suffixInfoLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        suffixInfoLabel.setText("<html>\n<p><b>Tip</b>: enter suffixes used for labels (incl. buttons and menu options), accesskeys and commandkeys.</p>\n<ul>\n<li>Separate multiples suffixes with | (vertical pipe).</li>\n<li>Include the empty suffix (useful for labels, don't use for others!) using [:empty:].</li>\n<li>NO leading dot is automatically prepended.</li>\n</ul>\n<p>Example: |.label|.button|.nameCmd||</p>\n</html>\n");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        keyConnPanel.add(suffixInfoLabel, gridBagConstraints);

        labelCaseCheck.setFont(new java.awt.Font("Dialog", 0, 12));
        labelCaseCheck.setText("C.S.");
        labelCaseCheck.setToolTipText("Check to make label suffixes case-sensitive.");
        labelCaseCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        keyConnPanel.add(labelCaseCheck, gridBagConstraints);

        akeyCaseCheck.setFont(new java.awt.Font("Dialog", 0, 12));
        akeyCaseCheck.setText("C.S.");
        akeyCaseCheck.setToolTipText("Check to make accesskeys suffixes case-sensitive.");
        akeyCaseCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        keyConnPanel.add(akeyCaseCheck, gridBagConstraints);

        ckeyCaseCheck.setFont(new java.awt.Font("Dialog", 0, 12));
        ckeyCaseCheck.setText("C.S.");
        ckeyCaseCheck.setToolTipText("Check to make commandkeys suffixes case-sensitive.");
        ckeyCaseCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        keyConnPanel.add(ckeyCaseCheck, gridBagConstraints);

        tabbedPane.addTab("Key Connections", null, keyConnPanel, "");

        importExportPanel.setLayout(new java.awt.GridBagLayout());

        exportingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Exporting", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        exportingPanel.setLayout(new java.awt.GridBagLayout());

        replaceEnUSCheck.setFont(new java.awt.Font("Dialog", 0, 12));
        replaceEnUSCheck.setMnemonic('R');
        replaceEnUSCheck.setText("Replace en-US directories name by ab-CD on exporting/writing");
        replaceEnUSCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 2);
        exportingPanel.add(replaceEnUSCheck, gridBagConstraints);

        zipPathLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        zipPathLabel.setText("Path to ZIP binary:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 2);
        exportingPanel.add(zipPathLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 2);
        exportingPanel.add(zipPathTextField, gridBagConstraints);

        zipPathButton.setMnemonic('C');
        zipPathButton.setText("Choose...");
        zipPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zipPathButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 2);
        exportingPanel.add(zipPathButton, gridBagConstraints);

        unzipPathLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        unzipPathLabel.setText("Path to UNZIP binary:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 2);
        exportingPanel.add(unzipPathLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 2.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 2);
        exportingPanel.add(unzipPathTextField, gridBagConstraints);

        unzipPathButton.setMnemonic('h');
        unzipPathButton.setText("Choose...");
        unzipPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unzipPathButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 2);
        exportingPanel.add(unzipPathButton, gridBagConstraints);

        useExtZipCheck.setFont(new java.awt.Font("Dialog", 0, 12));
        useExtZipCheck.setMnemonic('U');
        useExtZipCheck.setText("Use external ZIP binaries when exporting");
        useExtZipCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        useExtZipCheck.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                useExtZipCheckStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 2);
        exportingPanel.add(useExtZipCheck, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        importExportPanel.add(exportingPanel, gridBagConstraints);

        encodingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Encoding"));
        encodingPanel.setLayout(new java.awt.GridBagLayout());

        encodingLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        encodingLabel.setText("<html><p>DTD, INI and Properties files always use UTF-8 encoding. You can select which encoding to use for other files ((X)HTML, CSS, RDF, XML, SRC, TXT...).</p></html>");
        encodingLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        encodingLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        encodingLabel.setMaximumSize(new java.awt.Dimension(400, 60));
        encodingLabel.setMinimumSize(new java.awt.Dimension(200, 30));
        encodingLabel.setPreferredSize(new java.awt.Dimension(300, 45));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        encodingPanel.add(encodingLabel, gridBagConstraints);

        otherLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        otherLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        otherLabel.setText("Charset encoding:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        encodingPanel.add(otherLabel, gridBagConstraints);

        othersComboBox.setFont(new java.awt.Font("Dialog", 0, 12));
        othersComboBox.setModel(csOtherCmbModel);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        encodingPanel.add(othersComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        importExportPanel.add(encodingPanel, gridBagConstraints);

        tabbedPane.addTab("Import/Export", importExportPanel);

        qaPrefs.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        qaPrefs.setLayout(new java.awt.GridBagLayout());

        descripLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        descripLabel.setText("DTD entities ignored in Check Variables (example: &one;|&two;|&three;)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        qaPrefs.add(descripLabel, gridBagConstraints);

        ignoredOrigEntLabel.setDisplayedMnemonic('O');
        ignoredOrigEntLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        ignoredOrigEntLabel.setLabelFor(origDTDEntField);
        ignoredOrigEntLabel.setText("Original:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        qaPrefs.add(ignoredOrigEntLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        qaPrefs.add(origDTDEntField, gridBagConstraints);

        ignoredTrnsEntLabel.setDisplayedMnemonic('T');
        ignoredTrnsEntLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        ignoredTrnsEntLabel.setLabelFor(trnsDTDEntField);
        ignoredTrnsEntLabel.setText("Translated:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        qaPrefs.add(ignoredTrnsEntLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        qaPrefs.add(trnsDTDEntField, gridBagConstraints);

        endingCheckedCharsLabel.setDisplayedMnemonic('E');
        endingCheckedCharsLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        endingCheckedCharsLabel.setLabelFor(endingCheckedCharsField);
        endingCheckedCharsLabel.setText("Ending checked chars:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        qaPrefs.add(endingCheckedCharsLabel, gridBagConstraints);

        endingCheckedCharsField.setFont(new java.awt.Font("DialogInput", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        qaPrefs.add(endingCheckedCharsField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        qaPrefs.add(jSeparator1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        qaPrefs.add(jSeparator2, gridBagConstraints);

        useSuggCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        useSuggCheckBox.setMnemonic('U');
        useSuggCheckBox.setText("Use translation suggestions");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        qaPrefs.add(useSuggCheckBox, gridBagConstraints);

        pairedCharsListLabel.setDisplayedMnemonic('h');
        pairedCharsListLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        pairedCharsListLabel.setText("Character pairs to check:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        qaPrefs.add(pairedCharsListLabel, gridBagConstraints);

        pairedCharsListField.setFont(new java.awt.Font("DialogInput", 0, 12));
        pairedCharsListField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                pairedCharsListFieldFocusLost(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        qaPrefs.add(pairedCharsListField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        qaPrefs.add(jSeparator3, gridBagConstraints);

        tabbedPane.addTab("Automated tests", qaPrefs);

        advancedPanel.setPreferredSize(new java.awt.Dimension(250, 100));
        advancedPanel.setLayout(new java.awt.BorderLayout());

        titlePanel.setLayout(new java.awt.BorderLayout());

        warning1Label.setFont(new java.awt.Font("Dialog", 0, 18));
        warning1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        warning1Label.setText("IMPORTANT");
        titlePanel.add(warning1Label, java.awt.BorderLayout.NORTH);

        warning2Label.setFont(new java.awt.Font("Dialog", 0, 12));
        warning2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        warning2Label.setText("Don't touch this unless you're really sure what you're doing!");
        titlePanel.add(warning2Label, java.awt.BorderLayout.SOUTH);

        advancedPanel.add(titlePanel, java.awt.BorderLayout.NORTH);

        datamodelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Datamodel"));
        datamodelPanel.setLayout(new java.awt.GridBagLayout());

        datemodelFilenameLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        datemodelFilenameLabel.setText("Filename");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        datamodelPanel.add(datemodelFilenameLabel, gridBagConstraints);

        datamodelFilenameField.setColumns(10);
        datamodelFilenameField.setText("jTextField2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        datamodelPanel.add(datamodelFilenameField, gridBagConstraints);

        datamodelClassLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        datamodelClassLabel.setText("Persistence class");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        datamodelPanel.add(datamodelClassLabel, gridBagConstraints);

        datamodelClassField.setColumns(10);
        datamodelClassField.setText("jTextField3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        datamodelPanel.add(datamodelClassField, gridBagConstraints);

        advancedPanel.add(datamodelPanel, java.awt.BorderLayout.CENTER);

        loggingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Logging"));
        loggingPanel.setLayout(new java.awt.GridBagLayout());

        loggingSoutCheck.setFont(new java.awt.Font("Dialog", 0, 12));
        loggingSoutCheck.setText("Log to standard output");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        loggingPanel.add(loggingSoutCheck, gridBagConstraints);

        loggingSerrCheck.setFont(new java.awt.Font("Dialog", 0, 12));
        loggingSerrCheck.setText("Log to standard error");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        loggingPanel.add(loggingSerrCheck, gridBagConstraints);

        loggingFileCheck.setFont(new java.awt.Font("Dialog", 0, 12));
        loggingFileCheck.setText("Log to file:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        loggingPanel.add(loggingFileCheck, gridBagConstraints);

        loggingFileField.setColumns(30);
        loggingFileField.setText("mozillatranslator.log");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        loggingPanel.add(loggingFileField, gridBagConstraints);

        loggingPopupCheck.setFont(new java.awt.Font("Dialog", 0, 12));
        loggingPopupCheck.setText("Popup window when logging");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        loggingPanel.add(loggingPopupCheck, gridBagConstraints);

        advancedPanel.add(loggingPanel, java.awt.BorderLayout.SOUTH);

        tabbedPane.addTab("Advanced", null, advancedPanel, "");

        getContentPane().add(tabbedPane, java.awt.BorderLayout.CENTER);
        tabbedPane.getAccessibleContext().setAccessibleName("Automated tests");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void useExtZipCheckStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_useExtZipCheckStateChanged
        unzipPathTextField.setEnabled(useExtZipCheck.isSelected());
        unzipPathButton.setEnabled(useExtZipCheck.isSelected());
        zipPathTextField.setEnabled(useExtZipCheck.isSelected());
        zipPathButton.setEnabled(useExtZipCheck.isSelected());
    }//GEN-LAST:event_useExtZipCheckStateChanged
    
    private void unzipPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unzipPathButtonActionPerformed
        File defaultFile;
        JFileChooser chooser;
        int result;
        
        defaultFile = new File(unzipPathTextField.getText());
        chooser = new JFileChooser(".");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Select a UNZIP utility accepting parameters ala InfoZIP style");
        chooser.setSelectedFile(defaultFile);
        result = chooser.showDialog(this,"Choose");
        if (result == JFileChooser.APPROVE_OPTION) {
            defaultFile = chooser.getSelectedFile();
            unzipPathTextField.setText(defaultFile.toString());
        }
    }//GEN-LAST:event_unzipPathButtonActionPerformed
    
    private void zipPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zipPathButtonActionPerformed
        File defaultFile;
        JFileChooser chooser;
        int result;
        
        defaultFile = new File(zipPathTextField.getText());
        chooser = new JFileChooser(".");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Select a ZIP utility accepting parameters ala InfoZIP style");
        chooser.setSelectedFile(defaultFile);
        result = chooser.showDialog(this,"Choose");
        if (result == JFileChooser.APPROVE_OPTION) {
            defaultFile = chooser.getSelectedFile();
            zipPathTextField.setText(defaultFile.toString());
        }
    }//GEN-LAST:event_zipPathButtonActionPerformed
        
    private void licenseDtdButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_licenseDtdButtonPressed
        File defaultFile;
        JFileChooser chooser;
        int result;
        
        defaultFile = new File(licenseDtdField.getText());
        chooser = new JFileChooser(".");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Select a text file to use as license");
        chooser.setSelectedFile(defaultFile);
        result = chooser.showDialog(this,"Choose");
        if (result == JFileChooser.APPROVE_OPTION) {
            defaultFile = chooser.getSelectedFile();
            licenseDtdField.setText(defaultFile.toString());
        }
    }//GEN-LAST:event_licenseDtdButtonPressed
    
    private void licensePropertiesButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_licensePropertiesButtonPressed
        File defaultFile;
        JFileChooser chooser;
        int result;
        
        defaultFile = new File(licensePropertiesField.getText());
        chooser = new JFileChooser(".");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Select a text file to use as license");
        chooser.setSelectedFile(defaultFile);
        result = chooser.showDialog(this,"Choose");
        if (result == JFileChooser.APPROVE_OPTION) {
            defaultFile = chooser.getSelectedFile();
            licensePropertiesField.setText(defaultFile.toString());
        }
    }//GEN-LAST:event_licensePropertiesButtonPressed
    
    private void windowClose(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClose
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_windowClose
    
    private void cancelButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonPressed
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonPressed
    
    private void okButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonPressed
        okay = true;
        setVisible(false);
    }//GEN-LAST:event_okButtonPressed

private void editPhraseChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editPhraseChooseButtonActionPerformed
    SimpleFontChooser sfc = new SimpleFontChooser(Kernel.mainWindow,
                                                  editPhraseFontLabel.getFont());
    
    if (sfc.showFontDialog() == SimpleFontChooser.APPROVE_OPTION) {
        editPhraseFontLabel.setFont(sfc.getSelectedFont());
    }
}//GEN-LAST:event_editPhraseChooseButtonActionPerformed

private void tableViewChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableViewChooseButtonActionPerformed
    SimpleFontChooser sfc = new SimpleFontChooser(Kernel.mainWindow,
                                                  tableViewFontLabel.getFont());
    
    if (sfc.showFontDialog() == SimpleFontChooser.APPROVE_OPTION) {
        tableViewFontLabel.setFont(sfc.getSelectedFont());
    }
}//GEN-LAST:event_tableViewChooseButtonActionPerformed

private void pairedCharsListFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_pairedCharsListFieldFocusLost
    if (pairedCharsListField.getText().length() % 2 != 0) {
        JOptionPane.showMessageDialog(this, "Please, specify a string with even "
                                      + "length (or 0 to disable)",
                                      "String length error", JOptionPane.ERROR_MESSAGE);
        pairedCharsListField.requestFocusInWindow();
    }
}//GEN-LAST:event_pairedCharsListFieldFocusLost
    
/**
 * Shows the dialog (in a modal way)
 */
public void showDialog() {
        okay = false;
        Settings set = Kernel.settings;
        
        // General tab
        guiShowWhatCheck.setSelected(set.getBoolean(Settings.GUI_SHOW_WHAT_DIALOG));
        Font f;
        f = new Font(set.getString(Settings.FONT_EDITPHRASE_NAME),
                     set.getInteger(Settings.FONT_EDITPHRASE_STYLE),
                     set.getInteger(Settings.FONT_EDITPHRASE_SIZE));
        editPhraseFontLabel.setFont(f);
        f = new Font(set.getString(Settings.FONT_TABLEVIEW_NAME),
                     set.getInteger(Settings.FONT_TABLEVIEW_STYLE),
                     set.getInteger(Settings.FONT_TABLEVIEW_SIZE));
        tableViewFontLabel.setFont(f);
        editPhraseFontLabel.repaint();
        tableViewFontLabel.repaint();
        
        // License tab
        generalContributorField.setText(set.getString(Settings.LICENSE_CONTRIBUTOR));
        licensePropertiesField.setText(set.getString(Settings.LICENSE_PROPERTIES));
        licenseDtdField.setText(set.getString(Settings.LICENSE_DTD));
        
        // Key Connections tab
        akeyCaseCheck.setSelected(set.getBoolean(Settings.CONN_AKEYS_CASESENSE));
        akeyPatternField.setText(set.getString(Settings.CONN_AKEYS_PATTERNS));
        ckeyCaseCheck.setSelected(set.getBoolean(Settings.CONN_CKEYS_CASESENSE));
        ckeyPatternField.setText(set.getString(Settings.CONN_CKEYS_PATTERNS));
        labelCaseCheck.setSelected(set.getBoolean(Settings.CONN_LABEL_CASESENSE));
        labelPatternField.setText(set.getString(Settings.CONN_LABEL_PATTERNS));
        
        // Import/Export tab
        replaceEnUSCheck.setSelected(set.getBoolean(Settings.EXPORT_REPLACE_ENUS));
        useExtZipCheck.setSelected(set.getBoolean(Settings.USE_EXTERNAL_ZIP));
        zipPathTextField.setText(set.getString(Settings.EXTERNAL_ZIP_PATH));
        unzipPathTextField.setText(set.getString(Settings.EXTERNAL_UNZIP_PATH));
        othersComboBox.setSelectedItem(set.getString(Settings.ENCODING_OTHERFILES));
        
        // Advanced tab
        datamodelFilenameField.setText(set.getString(Settings.DATAMODEL_FILENAME,
                "glossary.zip"));
        datamodelClassField.setText(set.getString(Settings.DATAMODEL_PCLASS,
                "org.mozillatranslator.io.PropertiesPersistance"));
        loggingSoutCheck.setSelected(set.getBoolean(Settings.LOGGING_SOUT));
        loggingSerrCheck.setSelected(set.getBoolean(Settings.LOGGING_SERR));
        loggingFileCheck.setSelected(set.getBoolean(Settings.LOGGING_FILE));
        loggingFileField.setText(set.getString(Settings.LOGGING_FILENAME));
        loggingPopupCheck.setSelected(set.getBoolean(Settings.LOGGING_POPUP));
        
        // Automated tests tab
        origDTDEntField.setText(set.getString(Settings.QA_DTD_ORIG_ENTITIES_IGNORED));
        trnsDTDEntField.setText(set.getString(Settings.QA_DTD_TRNS_ENTITIES_IGNORED));
        endingCheckedCharsField.setText(set.getString(Settings.QA_ENDING_CHECKED_CHARS));
        useSuggCheckBox.setSelected(set.getBoolean(Settings.USE_SUGGESTIONS));
        pairedCharsListField.setText(set.getString(Settings.QA_PAIRED_CHARS_LIST));
        
        setVisible(true);
        
        if (okay) {
            // Set the new parameters
            
            // General tab
            set.setBoolean(Settings.GUI_SHOW_WHAT_DIALOG, guiShowWhatCheck.isSelected());
            f = editPhraseFontLabel.getFont();
            Kernel.editPhrase.setFontForOriginal(f);
            Kernel.editPhrase.setFontForTranslated(f);
            set.setString(Settings.FONT_EDITPHRASE_NAME, f.getFontName());
            set.setInteger(Settings.FONT_EDITPHRASE_SIZE, f.getSize());
            set.setInteger(Settings.FONT_EDITPHRASE_STYLE, f.getStyle());
            f = tableViewFontLabel.getFont();
            set.setString(Settings.FONT_TABLEVIEW_NAME, f.getFontName());
            set.setInteger(Settings.FONT_TABLEVIEW_SIZE, f.getSize());
            set.setInteger(Settings.FONT_TABLEVIEW_STYLE, f.getStyle());
            set.setString(Settings.LICENSE_CONTRIBUTOR, generalContributorField.getText());
            set.setString(Settings.LICENSE_PROPERTIES, licensePropertiesField.getText());
            set.setString(Settings.LICENSE_DTD, licenseDtdField.getText());
            
            // Key Connection tab
            set.setBoolean(Settings.CONN_AKEYS_CASESENSE, akeyCaseCheck.isSelected());
            set.setString(Settings.CONN_AKEYS_PATTERNS, akeyPatternField.getText());
            set.setBoolean(Settings.CONN_CKEYS_CASESENSE, ckeyCaseCheck.isSelected());
            set.setString(Settings.CONN_CKEYS_PATTERNS, ckeyPatternField.getText());
            set.setBoolean(Settings.CONN_LABEL_CASESENSE, labelCaseCheck.isSelected());
            set.setString(Settings.CONN_LABEL_PATTERNS, labelPatternField.getText());
            
            // Import/Export tab
            set.setBoolean(Settings.EXPORT_REPLACE_ENUS, replaceEnUSCheck.isSelected());
            set.setBoolean(Settings.USE_EXTERNAL_ZIP, useExtZipCheck.isSelected());
            set.setString(Settings.EXTERNAL_ZIP_PATH, zipPathTextField.getText());
            set.setString(Settings.EXTERNAL_UNZIP_PATH, unzipPathTextField.getText());
            set.setString(Settings.ENCODING_OTHERFILES, othersComboBox.getSelectedItem().toString());
            
            // Advanced tab
            set.setString(Settings.DATAMODEL_FILENAME, datamodelFilenameField.getText());
            set.setString(Settings.DATAMODEL_PCLASS, datamodelClassField.getText());
            set.setBoolean(Settings.LOGGING_SOUT, loggingSoutCheck.isSelected());
            set.setBoolean(Settings.LOGGING_SERR, loggingSerrCheck.isSelected());
            set.setBoolean(Settings.LOGGING_FILE, loggingFileCheck.isSelected());
            set.setString(Settings.LOGGING_FILENAME, loggingFileField.getText());
            set.setBoolean(Settings.LOGGING_POPUP, loggingPopupCheck.isSelected());

            // Automated tests tab
            set.setString(Settings.QA_DTD_ORIG_ENTITIES_IGNORED, origDTDEntField.getText());
            set.setString(Settings.QA_DTD_TRNS_ENTITIES_IGNORED, trnsDTDEntField.getText());
            set.setString(Settings.QA_ENDING_CHECKED_CHARS, endingCheckedCharsField.getText());
            set.setBoolean(Settings.USE_SUGGESTIONS, useSuggCheckBox.isSelected());
            set.setString(Settings.QA_PAIRED_CHARS_LIST, pairedCharsListField.getText());
        }
        dispose();
    }
    
    private DefaultComboBoxModel getNewCharSetComboBoxModel() {
        DefaultComboBoxModel curCmbBoxModel = new DefaultComboBoxModel();
        Collection charsetList = Charset.availableCharsets().values();
        Iterator it = charsetList.iterator();
        Charset curCharset;
        
        while (it.hasNext()) {
            curCharset = (Charset) it.next();
            curCmbBoxModel.addElement(curCharset.name());
        }
        
        return curCmbBoxModel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel advancedPanel;
    private javax.swing.JCheckBox akeyCaseCheck;
    private javax.swing.JTextField akeyPatternField;
    private javax.swing.JLabel akeyPatternLabel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox ckeyCaseCheck;
    private javax.swing.JTextField ckeyPatternField;
    private javax.swing.JLabel ckeyPatternLabel;
    private javax.swing.JTextField datamodelClassField;
    private javax.swing.JLabel datamodelClassLabel;
    private javax.swing.JTextField datamodelFilenameField;
    private javax.swing.JPanel datamodelPanel;
    private javax.swing.JLabel datemodelFilenameLabel;
    private javax.swing.JLabel descripLabel;
    private javax.swing.JButton editPhraseChooseButton;
    private javax.swing.JLabel editPhraseFontLabel;
    private javax.swing.JLabel encodingLabel;
    private javax.swing.JPanel encodingPanel;
    private javax.swing.JTextField endingCheckedCharsField;
    private javax.swing.JLabel endingCheckedCharsLabel;
    private javax.swing.JPanel exportingPanel;
    private javax.swing.JTextField generalContributorField;
    private javax.swing.JLabel generalContributorLabel;
    private javax.swing.JPanel generalPanel;
    private javax.swing.JCheckBox guiShowWhatCheck;
    private javax.swing.JLabel ignoredOrigEntLabel;
    private javax.swing.JLabel ignoredTrnsEntLabel;
    private javax.swing.JPanel importExportPanel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JPanel keyConnPanel;
    private javax.swing.JCheckBox labelCaseCheck;
    private javax.swing.JTextField labelPatternField;
    private javax.swing.JLabel labelPatternLabel;
    private javax.swing.JButton licenseDtdButton;
    private javax.swing.JTextField licenseDtdField;
    private javax.swing.JLabel licenseDtdLabel;
    private javax.swing.JPanel licensePanel;
    private javax.swing.JButton licensePropertiesButton;
    private javax.swing.JTextField licensePropertiesField;
    private javax.swing.JLabel licensePropertiesLabel;
    private javax.swing.JCheckBox loggingFileCheck;
    private javax.swing.JTextField loggingFileField;
    private javax.swing.JPanel loggingPanel;
    private javax.swing.JCheckBox loggingPopupCheck;
    private javax.swing.JCheckBox loggingSerrCheck;
    private javax.swing.JCheckBox loggingSoutCheck;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField origDTDEntField;
    private javax.swing.JLabel otherLabel;
    private javax.swing.JComboBox othersComboBox;
    private javax.swing.JTextField pairedCharsListField;
    private javax.swing.JLabel pairedCharsListLabel;
    private javax.swing.JPanel qaPrefs;
    private javax.swing.JCheckBox replaceEnUSCheck;
    private javax.swing.JLabel suffixInfoLabel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JButton tableViewChooseButton;
    private javax.swing.JLabel tableViewFontLabel;
    private javax.swing.JTextField trnsDTDEntField;
    private javax.swing.JButton unzipPathButton;
    private javax.swing.JLabel unzipPathLabel;
    private javax.swing.JTextField unzipPathTextField;
    private javax.swing.JCheckBox useExtZipCheck;
    private javax.swing.JCheckBox useSuggCheckBox;
    private javax.swing.JPanel visualPrefPanel;
    private javax.swing.JLabel warning1Label;
    private javax.swing.JLabel warning2Label;
    private javax.swing.JButton zipPathButton;
    private javax.swing.JLabel zipPathLabel;
    private javax.swing.JTextField zipPathTextField;
    // End of variables declaration//GEN-END:variables
    private boolean okay;
    private DefaultComboBoxModel csIniCmbModel;
    private DefaultComboBoxModel csOtherCmbModel;
}
