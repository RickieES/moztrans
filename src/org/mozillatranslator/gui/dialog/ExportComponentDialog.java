/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 *  except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is MozillaTranslator (Mozilla Localization Tool)
 *
 * The Initial Developer of the Original Code is Henrik Lynggaard Hansen
 *
 * Portions created by Henrik Lynggard Hansen are
 * Copyright (C) Henrik Lynggaard Hansen.
 * All Rights Reserved.
 *
 * Contributor(s):
 * Henrik Lynggaard Hansen (Initial Code)
 * Ricardo Palomares (refactoring to remove subcomponent from the datamodel)
 *
 */

package org.mozillatranslator.gui.dialog;

import org.mozillatranslator.io.ComponentTransferDataObject;
import java.io.*;
import javax.swing.*;
import javax.swing.tree.*;
import org.mozillatranslator.kernel.*;
import org.mozillatranslator.datamodel.*;
import org.mozillatranslator.util.*;
import org.mozillatranslator.datamodel.TreeNode;
/**
 *
 * @author  Henrik Lynggaard
 */
public class ExportComponentDialog extends MozDialog {

    /** Creates new form ExportFileDialog */
    public ExportComponentDialog(String way, int format) {
        super(way + " component");
        this.format = format;
        this.way = way;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        exportLabel = new javax.swing.JLabel();
        exportScroll = new javax.swing.JScrollPane();
        exportTree = new JTree(Kernel.datamodel.getTree(TreeNode.LEVEL_COMPONENT));
        fileLabel = new javax.swing.JLabel();
        fileField = new javax.swing.JTextField();
        fileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        infoPanel.setLayout(new java.awt.GridBagLayout());

        exportLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        exportLabel.setText("Export");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(exportLabel, gridBagConstraints);

        exportTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                exportTreeValueChanged(evt);
            }
        });

        exportScroll.setViewportView(exportTree);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(exportScroll, gridBagConstraints);

        fileLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        fileLabel.setText("File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(fileLabel, gridBagConstraints);

        fileField.setText("jTextField2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(fileField, gridBagConstraints);

        fileButton.setText("Choose");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(fileButton, gridBagConstraints);

        getContentPane().add(infoPanel, java.awt.BorderLayout.CENTER);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        okay = true;
        setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        File defaultFile;
        JFileChooser chooser;
        int result;

        defaultFile = new File(fileField.getText());
        File f = defaultFile.isFile() ? defaultFile :
            new File(Kernel.settings.getString(Settings.GUI_EXPORT_FILE_CHOOSER_PATH));
        chooser = new JFileChooser(f);

        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Select Where to export to");
        chooser.setSelectedFile(defaultFile);

        result = chooser.showDialog(this, "Choose");
        if (result == JFileChooser.APPROVE_OPTION) {
            Kernel.settings.setString(Settings.GUI_EXPORT_FILE_CHOOSER_PATH,
                    chooser.getCurrentDirectory().getAbsolutePath());
            defaultFile = chooser.getSelectedFile();
            fileField.setText(defaultFile.toString());
        }
    }//GEN-LAST:event_fileButtonActionPerformed

    private void exportTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_exportTreeValueChanged
        TreePath tp;
        DefaultMutableTreeNode chosen;
        org.mozillatranslator.datamodel.TreeNode ourObject;

        tp = evt.getNewLeadSelectionPath();
        chosen = (DefaultMutableTreeNode) tp.getLastPathComponent();

        try {
            ourObject = (org.mozillatranslator.datamodel.TreeNode) chosen.getUserObject();
            // Enable OK button only if the node selected to export is a Component
            okButton.setEnabled(ourObject instanceof Component);
        } catch (NullPointerException e) {
            okButton.setEnabled(false);
        } catch (ClassCastException e) {
            okButton.setEnabled(false);
        }
    }//GEN-LAST:event_exportTreeValueChanged

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        okay = false;
        setVisible(false);

    }//GEN-LAST:event_closeDialog

    @Override
    protected void collect() {
        ComponentTransferDataObject dao = new ComponentTransferDataObject();
        dao.setFileName(fileField.getText());
        dao.setFormat(format);

        TreePath tp = exportTree.getLeadSelectionPath();
        DefaultMutableTreeNode chosen = (DefaultMutableTreeNode) tp.getLastPathComponent();
        dao.setComponent((Component) chosen.getUserObject());
        data = dao;
    }

    @Override
    protected void init() {
        initComponents();
        exportLabel.setText(way);
        setSize(640, 400);
        okButton.setEnabled(false);

        JDialogHelper.setupOKCancelHotkeys(this, okButton, cancelButton);
        GuiTools.placeFrameAtCenter(this);
    }

    @Override
    protected void populate() {
        fileField.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel exportLabel;
    private javax.swing.JScrollPane exportScroll;
    private javax.swing.JTree exportTree;
    private javax.swing.JButton fileButton;
    private javax.swing.JTextField fileField;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
    //private boolean okay;
    private int format;
    private String way;
}
