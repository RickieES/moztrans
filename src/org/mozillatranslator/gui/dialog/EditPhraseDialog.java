/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 *  except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is MozillaTranslator (Mozilla Localization Tool)
 *
 * The Initial Developer of the Original Code is Henrik Lynggaard Hansen
 *
 * Portions created by Henrik Lynggard Hansen are
 * Copyright (C) Henrik Lynggaard Hansen.
 * All Rights Reserved.
 *
 * Contributor(s):
 * Henrik Lynggaard Hansen (Initial Code)
 *
 */


package org.mozillatranslator.gui.dialog;

import java.awt.Font;
import javax.swing.undo.UndoManager;
import javax.swing.text.JTextComponent;
import javax.swing.text.Document;
import javax.swing.event.UndoableEditListener;
import javax.swing.AbstractAction;
import javax.swing.event.UndoableEditEvent;
import java.awt.event.ActionEvent;
import javax.swing.undo.CannotUndoException;
import javax.swing.KeyStroke;
import javax.swing.undo.CannotRedoException;
import org.mozillatranslator.datamodel.Phrase;
import org.mozillatranslator.datamodel.PhraseList;
import org.mozillatranslator.datamodel.Translation;
import org.mozillatranslator.datamodel.TreeNode;
import org.mozillatranslator.gui.MozFrame;
import org.mozillatranslator.gui.SuggestionsKeyAdapter;
import org.mozillatranslator.gui.ThreeDotKeyAdapter;
import org.mozillatranslator.gui.model.StatusCell;
import org.mozillatranslator.kernel.Kernel;
import org.mozillatranslator.kernel.Settings;
import org.mozillatranslator.util.GuiTools;

/**
 *
 * @author  Henrik Lynggaard
 */
public class EditPhraseDialog extends javax.swing.JDialog {

    /** Creates new form EditPhraseDialog */
    public EditPhraseDialog() {
        super(Kernel.mainWindow, "Edit Phrase", true);

        f = new Font(Kernel.settings.getString(Settings.FONT_EDITPHRASE_NAME),
                     Kernel.settings.getInteger(Settings.FONT_EDITPHRASE_STYLE),
                     Kernel.settings.getInteger(Settings.FONT_EDITPHRASE_SIZE));
        
        pl = new PhraseList(null);
        initComponents();
        advTransstatusCombo.addItem(StatusCell.lookupStatusCell(Translation.STATUS_NOTSEEN));
        advTransstatusCombo.addItem(StatusCell.lookupStatusCell(Translation.STATUS_CHANGED));
        advTransstatusCombo.addItem(StatusCell.lookupStatusCell(Translation.STATUS_TRANSLATED));
        advTransstatusCombo.addItem(StatusCell.lookupStatusCell(Translation.STATUS_ERROR));
        advTransstatusCombo.addItem(StatusCell.lookupStatusCell(Translation.STATUS_ACCEPTED));
        advTransstatusCombo.addItem(StatusCell.lookupStatusCell(Translation.STATUS_PERFECT));
        advTransstatusCombo.addItem(StatusCell.lookupStatusCell(Translation.STATUS_OTHER));
        advTransstatusCombo.addItem(StatusCell.lookupStatusCell(Translation.STATUS_MIGRATED));

        originalArea.setLineWrap(true);
        originalArea.setWrapStyleWord(true);
        qaresultTextArea.setLineWrap(true);
        qaresultTextArea.setWrapStyleWord(true);
        translatedArea.setLineWrap(true);
        translatedArea.setWrapStyleWord(true);
        initUndoManager(translatedArea);

        getRootPane().setDefaultButton(closeButton);
        GuiTools.placeFrameAtCenter(this);
        
        tdka = new ThreeDotKeyAdapter();
        SuggestionsKeyAdapter sgka = new SuggestionsKeyAdapter();
        translatedArea.addKeyListener(tdka);
        translatedArea.addKeyListener(sgka);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        suggestionDialog = new javax.swing.JDialog();
        suggDescLabel = new javax.swing.JLabel();
        suggScrollPane = new javax.swing.JScrollPane();
        suggList = new javax.swing.JList();
        suggButtonPanel = new javax.swing.JPanel();
        suggOkButton = new javax.swing.JButton();
        suggCancelButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        okclosePanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        prevnextPanel = new javax.swing.JPanel();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        basicPanel = new javax.swing.JPanel();
        basicSplitpane = new javax.swing.JSplitPane();
        uppersplitPanel = new javax.swing.JPanel();
        originalScroll = new javax.swing.JScrollPane();
        originalArea = new javax.swing.JTextArea();
        originalLabel = new javax.swing.JLabel();
        switchONButton = new javax.swing.JButton();
        lowersplitPanel = new javax.swing.JPanel();
        commandPanel = new javax.swing.JPanel();
        copyButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        basicClearButton = new javax.swing.JButton();
        keepCheck = new javax.swing.JCheckBox();
        translatedPanel = new javax.swing.JPanel();
        translatedScroll = new javax.swing.JScrollPane();
        translatedArea = new javax.swing.JTextArea();
        translatedLabel = new javax.swing.JLabel();
        suggestionButton = new javax.swing.JButton();
        advancedPanel = new javax.swing.JPanel();
        advInfoPanel = new javax.swing.JPanel();
        advInfoProductLabel = new javax.swing.JLabel();
        advInfoProductField = new javax.swing.JTextField();
        advInfoContainerLabel = new javax.swing.JLabel();
        advInfoContainerField = new javax.swing.JTextField();
        advInfoComponentLabel = new javax.swing.JLabel();
        advInfoComponentFieldl = new javax.swing.JTextField();
        advInfoFileLabel = new javax.swing.JLabel();
        advInfoFileField = new javax.swing.JTextField();
        advInfoPhraseLabel = new javax.swing.JLabel();
        advInfoPhraseField = new javax.swing.JTextField();
        advInfoCommandLabel = new javax.swing.JLabel();
        advInfoCommandField = new javax.swing.JTextField();
        advInfoAccessLabel = new javax.swing.JLabel();
        advInfoAccessField = new javax.swing.JTextField();
        advOrgPanel = new javax.swing.JPanel();
        advOrgCommandLabel = new javax.swing.JLabel();
        advOrgCommandField = new javax.swing.JTextField();
        advOrgAccessLabel = new javax.swing.JLabel();
        advOrgAccessField = new javax.swing.JTextField();
        advTransPanel = new javax.swing.JPanel();
        advTransCommandLabel = new javax.swing.JLabel();
        advTransCommandField = new javax.swing.JTextField();
        advTransAccessLabel = new javax.swing.JLabel();
        advTransAccessField = new javax.swing.JTextField();
        advTransCommentLabel = new javax.swing.JLabel();
        advTransCommentField = new javax.swing.JTextField();
        advTransStatusLabel = new javax.swing.JLabel();
        advTransstatusCombo = new javax.swing.JComboBox();
        qaPanel = new javax.swing.JPanel();
        qaresultLabel = new javax.swing.JLabel();
        qaresultScrollPane = new javax.swing.JScrollPane();
        qaresultTextArea = new javax.swing.JTextArea();

        suggestionDialog.setTitle("List of suggestions");
        suggestionDialog.setModal(true);
        suggestionDialog.getContentPane().setLayout(new java.awt.BorderLayout(1, 1));

        suggDescLabel.setText("Select entry and click OK, or click Cancel to exit");
        suggestionDialog.getContentPane().add(suggDescLabel, java.awt.BorderLayout.NORTH);

        suggList.setModel(pl);
        suggScrollPane.setViewportView(suggList);

        suggestionDialog.getContentPane().add(suggScrollPane, java.awt.BorderLayout.CENTER);

        suggOkButton.setText("OK");
        suggOkButton.setMaximumSize(new java.awt.Dimension(80, 27));
        suggOkButton.setMinimumSize(new java.awt.Dimension(80, 27));
        suggOkButton.setPreferredSize(new java.awt.Dimension(80, 27));
        suggOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suggOkButtonActionPerformed(evt);
            }
        });
        suggButtonPanel.add(suggOkButton);

        suggCancelButton.setText("Cancel");
        suggCancelButton.setMaximumSize(new java.awt.Dimension(80, 27));
        suggCancelButton.setMinimumSize(new java.awt.Dimension(80, 27));
        suggCancelButton.setPreferredSize(new java.awt.Dimension(80, 27));
        suggCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suggCancelButtonActionPerformed(evt);
            }
        });
        suggButtonPanel.add(suggCancelButton);

        suggestionDialog.getContentPane().add(suggButtonPanel, java.awt.BorderLayout.SOUTH);

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        buttonPanel.setLayout(new java.awt.BorderLayout());

        closeButton.setFont(new java.awt.Font("Dialog", 0, 12));
        closeButton.setText("Close");
        closeButton.setToolTipText("Closes the window with saving");
        closeButton.setMaximumSize(new java.awt.Dimension(85, 27));
        closeButton.setMinimumSize(new java.awt.Dimension(85, 27));
        closeButton.setPreferredSize(new java.awt.Dimension(85, 27));
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonPressed(evt);
            }
        });
        okclosePanel.add(closeButton);

        buttonPanel.add(okclosePanel, java.awt.BorderLayout.WEST);

        prevnextPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        prevButton.setFont(new java.awt.Font("Dialog", 0, 12));
        prevButton.setMnemonic('P');
        prevButton.setText("Previous");
        prevButton.setToolTipText("Moves the previous text with saving");
        prevButton.setMaximumSize(new java.awt.Dimension(85, 27));
        prevButton.setMinimumSize(new java.awt.Dimension(85, 27));
        prevButton.setPreferredSize(new java.awt.Dimension(85, 27));
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonPressed(evt);
            }
        });
        prevnextPanel.add(prevButton);

        nextButton.setFont(new java.awt.Font("Dialog", 0, 12));
        nextButton.setMnemonic('N');
        nextButton.setText("Next");
        nextButton.setToolTipText("Moves to the next text with saving");
        nextButton.setMaximumSize(new java.awt.Dimension(85, 27));
        nextButton.setMinimumSize(new java.awt.Dimension(85, 27));
        nextButton.setPreferredSize(new java.awt.Dimension(85, 27));
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonPressed(evt);
            }
        });
        prevnextPanel.add(nextButton);

        buttonPanel.add(prevnextPanel, java.awt.BorderLayout.EAST);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        tabbedPane.setFont(new java.awt.Font("Dialog", 0, 12));

        basicPanel.setLayout(new java.awt.BorderLayout());

        basicSplitpane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        basicSplitpane.setContinuousLayout(true);
        basicSplitpane.setOneTouchExpandable(true);

        uppersplitPanel.setLayout(new java.awt.GridBagLayout());

        originalArea.setColumns(50);
        originalArea.setEditable(false);
        originalArea.setFont(f);
        originalArea.setRows(7);
        originalScroll.setViewportView(originalArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        uppersplitPanel.add(originalScroll, gridBagConstraints);

        originalLabel.setDisplayedMnemonic('O');
        originalLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        originalLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        originalLabel.setLabelFor(originalArea);
        originalLabel.setText("Original");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        uppersplitPanel.add(originalLabel, gridBagConstraints);

        switchONButton.setFont(new java.awt.Font("Dialog", 0, 12));
        switchONButton.setMnemonic('w');
        switchONButton.setText("Switch");
        switchONButton.setToolTipText("Switch between original text and Localization Note, if available");
        switchONButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchONButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        uppersplitPanel.add(switchONButton, gridBagConstraints);

        basicSplitpane.setLeftComponent(uppersplitPanel);

        lowersplitPanel.setLayout(new java.awt.BorderLayout());

        copyButton.setFont(new java.awt.Font("Dialog", 0, 12));
        copyButton.setMnemonic('C');
        copyButton.setText("Copy");
        copyButton.setMaximumSize(new java.awt.Dimension(85, 27));
        copyButton.setMinimumSize(new java.awt.Dimension(85, 27));
        copyButton.setPreferredSize(new java.awt.Dimension(85, 27));
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonPressed(evt);
            }
        });
        commandPanel.add(copyButton);

        resetButton.setFont(new java.awt.Font("Dialog", 0, 12));
        resetButton.setMnemonic('R');
        resetButton.setText("Reset");
        resetButton.setMaximumSize(new java.awt.Dimension(85, 27));
        resetButton.setMinimumSize(new java.awt.Dimension(85, 27));
        resetButton.setPreferredSize(new java.awt.Dimension(85, 27));
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonPressed(evt);
            }
        });
        commandPanel.add(resetButton);

        basicClearButton.setFont(new java.awt.Font("Dialog", 0, 12));
        basicClearButton.setMnemonic('l');
        basicClearButton.setText("Clear");
        basicClearButton.setMaximumSize(new java.awt.Dimension(85, 27));
        basicClearButton.setMinimumSize(new java.awt.Dimension(85, 27));
        basicClearButton.setPreferredSize(new java.awt.Dimension(85, 27));
        basicClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                basicClearButtonPressed(evt);
            }
        });
        commandPanel.add(basicClearButton);

        keepCheck.setFont(new java.awt.Font("Dialog", 0, 12));
        keepCheck.setMnemonic('k');
        keepCheck.setText("Keep Original");
        commandPanel.add(keepCheck);

        lowersplitPanel.add(commandPanel, java.awt.BorderLayout.NORTH);

        translatedPanel.setLayout(new java.awt.GridBagLayout());

        translatedArea.setColumns(50);
        translatedArea.setFont(f);
        translatedArea.setRows(7);
        translatedScroll.setViewportView(translatedArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        translatedPanel.add(translatedScroll, gridBagConstraints);

        translatedLabel.setDisplayedMnemonic('T');
        translatedLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        translatedLabel.setLabelFor(translatedArea);
        translatedLabel.setText("Translated");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        translatedPanel.add(translatedLabel, gridBagConstraints);

        suggestionButton.setText("No sug.");
        suggestionButton.setToolTipText("Click to see the list of available suggestions");
        suggestionButton.setEnabled(false);
        suggestionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        suggestionButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        suggestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                suggestionButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        translatedPanel.add(suggestionButton, gridBagConstraints);

        lowersplitPanel.add(translatedPanel, java.awt.BorderLayout.CENTER);

        basicSplitpane.setRightComponent(lowersplitPanel);

        basicPanel.add(basicSplitpane, java.awt.BorderLayout.CENTER);

        tabbedPane.addTab("Basic", null, basicPanel, "");

        advancedPanel.setLayout(new java.awt.GridBagLayout());

        advInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Information"));
        advInfoPanel.setLayout(new java.awt.GridBagLayout());

        advInfoProductLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        advInfoProductLabel.setText("Product");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advInfoPanel.add(advInfoProductLabel, gridBagConstraints);

        advInfoProductField.setEditable(false);
        advInfoProductField.setText("Product");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advInfoPanel.add(advInfoProductField, gridBagConstraints);

        advInfoContainerLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        advInfoContainerLabel.setText("Container");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advInfoPanel.add(advInfoContainerLabel, gridBagConstraints);

        advInfoContainerField.setEditable(false);
        advInfoContainerField.setText("container");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advInfoPanel.add(advInfoContainerField, gridBagConstraints);

        advInfoComponentLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        advInfoComponentLabel.setText("Component");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advInfoPanel.add(advInfoComponentLabel, gridBagConstraints);

        advInfoComponentFieldl.setEditable(false);
        advInfoComponentFieldl.setText("Component");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advInfoPanel.add(advInfoComponentFieldl, gridBagConstraints);

        advInfoFileLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        advInfoFileLabel.setText("File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advInfoPanel.add(advInfoFileLabel, gridBagConstraints);

        advInfoFileField.setEditable(false);
        advInfoFileField.setText("File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advInfoPanel.add(advInfoFileField, gridBagConstraints);

        advInfoPhraseLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        advInfoPhraseLabel.setText("Phrase");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advInfoPanel.add(advInfoPhraseLabel, gridBagConstraints);

        advInfoPhraseField.setEditable(false);
        advInfoPhraseField.setText("Phrase");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advInfoPanel.add(advInfoPhraseField, gridBagConstraints);

        advInfoCommandLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        advInfoCommandLabel.setText("Command Key");
        advInfoCommandLabel.setMaximumSize(new java.awt.Dimension(86, 15));
        advInfoCommandLabel.setPreferredSize(new java.awt.Dimension(86, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advInfoPanel.add(advInfoCommandLabel, gridBagConstraints);

        advInfoCommandField.setEditable(false);
        advInfoCommandField.setText("commentkey");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advInfoPanel.add(advInfoCommandField, gridBagConstraints);

        advInfoAccessLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        advInfoAccessLabel.setText("Access Key");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advInfoPanel.add(advInfoAccessLabel, gridBagConstraints);

        advInfoAccessField.setEditable(false);
        advInfoAccessField.setText("Access key");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advInfoPanel.add(advInfoAccessField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advancedPanel.add(advInfoPanel, gridBagConstraints);

        advOrgPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Original"));
        advOrgPanel.setLayout(new java.awt.GridBagLayout());

        advOrgCommandLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        advOrgCommandLabel.setText("Command Key");
        advOrgCommandLabel.setMaximumSize(new java.awt.Dimension(86, 15));
        advOrgCommandLabel.setPreferredSize(new java.awt.Dimension(86, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advOrgPanel.add(advOrgCommandLabel, gridBagConstraints);

        advOrgCommandField.setEditable(false);
        advOrgCommandField.setText("commandkey");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        advOrgPanel.add(advOrgCommandField, gridBagConstraints);

        advOrgAccessLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        advOrgAccessLabel.setText("Access Key");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advOrgPanel.add(advOrgAccessLabel, gridBagConstraints);

        advOrgAccessField.setEditable(false);
        advOrgAccessField.setText("access key");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(6, 6, 6, 6);
        advOrgPanel.add(advOrgAccessField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advancedPanel.add(advOrgPanel, gridBagConstraints);

        advTransPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Translation"));
        advTransPanel.setLayout(new java.awt.GridBagLayout());

        advTransCommandLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        advTransCommandLabel.setText("Command Key");
        advTransCommandLabel.setMaximumSize(new java.awt.Dimension(86, 15));
        advTransCommandLabel.setPreferredSize(new java.awt.Dimension(86, 15));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advTransPanel.add(advTransCommandLabel, gridBagConstraints);

        advTransCommandField.setText("command key");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advTransPanel.add(advTransCommandField, gridBagConstraints);

        advTransAccessLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        advTransAccessLabel.setText("Access key");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advTransPanel.add(advTransAccessLabel, gridBagConstraints);

        advTransAccessField.setText("access key");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advTransPanel.add(advTransAccessField, gridBagConstraints);

        advTransCommentLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        advTransCommentLabel.setText("Comment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advTransPanel.add(advTransCommentLabel, gridBagConstraints);

        advTransCommentField.setText("comment");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advTransPanel.add(advTransCommentField, gridBagConstraints);

        advTransStatusLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        advTransStatusLabel.setText("Status");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advTransPanel.add(advTransStatusLabel, gridBagConstraints);

        advTransstatusCombo.setFont(new java.awt.Font("Dialog", 0, 12));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advTransPanel.add(advTransstatusCombo, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        advancedPanel.add(advTransPanel, gridBagConstraints);

        tabbedPane.addTab("Advanced", null, advancedPanel, "");

        qaPanel.setLayout(new java.awt.BorderLayout());

        qaresultLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        qaresultLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        qaresultLabel.setText("Latest results");
        qaresultLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        qaPanel.add(qaresultLabel, java.awt.BorderLayout.NORTH);

        qaresultTextArea.setColumns(50);
        qaresultTextArea.setEditable(false);
        qaresultTextArea.setFont(new java.awt.Font("DialogInput", 0, 12));
        qaresultTextArea.setRows(7);
        qaresultScrollPane.setViewportView(qaresultTextArea);

        qaPanel.add(qaresultScrollPane, java.awt.BorderLayout.CENTER);

        tabbedPane.addTab("QA results", qaPanel);

        getContentPane().add(tabbedPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Sets the font for Original textarea
     * @param f The font to set
     */
    public void setFontForOriginal(Font f) {
        originalArea.setFont(f);
    }
    
    /**
     * Sets the font for Translated textarea
     * @param f The font to set
     */
    public void setFontForTranslated(Font f) {
        translatedArea.setFont(f);
    }
    
    /**
     * Performs an action on [Alt]+[s] keystroke consisting of
     * getting the next Phrase in the suggestions list and (by calling
     * setNextSuggestion) replacing the translatedArea text and
     * KeepOriginal with appropiate values based on that Phrase
     */
    public void nextSuggestionByKeyStroke() {
        if (pl != null) {
            Phrase p = (Phrase) pl.cycleThroughList();
            if (p != null) {
                setNextSuggestion(p);
            }
        }
        int s = pl.size();
        int p = (pl.getCurrentIndex() == 0) ? s : pl.getCurrentIndex();
        this.suggestionButton.setText(p + "/" + s);
    }
    
    /**
     * Replaces translatedArea text and KeepOriginal flag with
     * appropiate values based on the Phrase passed as a parameter
     * @param p The phrase accepted as suggestion
     */
    private void setNextSuggestion(Phrase p) {
        Translation t = (Translation) p.getChildByName(l10n);
        if (t != null) {
            String suggestion = t.getText();
            translatedArea.setText(suggestion);
        } else {
            translatedArea.setText("");
        }
        this.keepCheck.setSelected(p.isKeepOriginal());
    }

    /**
     * Switches between the L10n note and the original text
     * @param evt
     */
    private void switchONButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchONButtonActionPerformed
        if (showingOriginal) {
            originalLabel.setText("L10n note");
            originalArea.setText(currentPhrase.getLocalizationNote());
        } else {
            originalLabel.setText("Original");
            originalArea.setText(currentPhrase.getText());
        }
        showingOriginal = !showingOriginal;
    }//GEN-LAST:event_switchONButtonActionPerformed

    private void nextButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_nextButtonPressed
    {//GEN-HEADEREND:event_nextButtonPressed
        onApply();

        currentIndex++;
        currentPhrase = frame.getPhraseByIndex(currentIndex);
        if (currentIndex == 0) {
            prevButton.setEnabled(false);
        } else {
            prevButton.setEnabled(true);
        }

        if ((currentIndex + 1) < maxIndex) {
            nextButton.setEnabled(true);
        } else {
            nextButton.setEnabled(false);
        }
        loadPhrase();
        
        translatedArea.requestFocusInWindow();
    }//GEN-LAST:event_nextButtonPressed

    private void prevButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_prevButtonPressed
    {//GEN-HEADEREND:event_prevButtonPressed
        onApply();

        currentIndex--;
        currentPhrase = frame.getPhraseByIndex(currentIndex);
        if (currentIndex == 0) {
            prevButton.setEnabled(false);
        } else {
            prevButton.setEnabled(true);
        }

        if ((currentIndex + 1) < maxIndex) {
            nextButton.setEnabled(true);
        } else {
            nextButton.setEnabled(false);
        }
        loadPhrase();

        translatedArea.requestFocusInWindow();
    }//GEN-LAST:event_prevButtonPressed

    private void basicClearButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_basicClearButtonPressed
    {//GEN-HEADEREND:event_basicClearButtonPressed
        translatedArea.setText("");
        translatedArea.grabFocus();
    }//GEN-LAST:event_basicClearButtonPressed

    private void resetButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetButtonPressed
    {//GEN-HEADEREND:event_resetButtonPressed
        Translation currentTranslation = (Translation) currentPhrase.getChildByName(l10n);
        if (currentTranslation != null) {
            translatedArea.setText(currentTranslation.getText());
        } else {
            translatedArea.setText("");
        }
        translatedArea.grabFocus();
    }//GEN-LAST:event_resetButtonPressed

    private void copyButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_copyButtonPressed
    {//GEN-HEADEREND:event_copyButtonPressed
        translatedArea.setText(originalArea.getText());
        translatedArea.grabFocus();
    }//GEN-LAST:event_copyButtonPressed

    private void onApply() {
        Translation currentTranslation;
        currentTranslation = (Translation) currentPhrase.getChildByName(l10n);
        String translation = translatedArea.getText();
        String comment = advTransCommentField.getText();
        StatusCell cell = (StatusCell) advTransstatusCombo.getSelectedItem();
        int status = cell.getKey();

        if (currentPhrase.isKeepOriginal() != keepCheck.isSelected()) {
            currentPhrase.setKeepOriginal(keepCheck.isSelected());
        }
        currentPhrase.setFuzzy(false);

        if (translation.equals("")) {
            if (currentTranslation != null) {
                currentPhrase.removeChild(currentTranslation);
            }
        } else {
            if (currentTranslation == null) {
                currentTranslation = new Translation(l10n,currentPhrase, translation, status);
                currentTranslation.setComment(comment);
                currentPhrase.addChild(currentTranslation);
            } else {
                if (!currentTranslation.getText().equals(translation)) {
                    currentTranslation.setText(translation);
                }

                if ((currentTranslation.getComment() != null)
                        && (!currentTranslation.getComment().equals(comment))) {
                    currentTranslation.setComment(comment);
                }

                if (currentTranslation.getStatus() != status) {
                    currentTranslation.setStatus(status);
                }
            }
        }

        if (accessConnection != null) {
            Translation accessTranslation = (Translation) accessConnection.getChildByName(l10n);
            translation = advTransAccessField.getText();

            if (translation.equals("")) {
                if (accessTranslation != null) {
                    accessConnection.removeChild(accessTranslation);
                }
            } else {
                if (accessTranslation == null) {
                    accessTranslation = new Translation(l10n,accessConnection,
                                                        translation,
                                                        Translation.STATUS_CHANGED);
                    accessConnection.addChild(accessTranslation);
                } else {
                    accessTranslation.setText(translation);
                    accessTranslation.setStatus(Translation.STATUS_CHANGED);
                }
            }
        }

        if (commandConnection != null) {
            Translation commandTranslation = (Translation) commandConnection.getChildByName(l10n);
            translation = advTransCommandField.getText();

            if (translation.equals("")) {
                if (commandTranslation != null) {
                    commandConnection.removeChild(commandTranslation);
                }
            } else {
                if (commandTranslation == null) {
                    commandTranslation = new Translation(l10n,commandConnection,
                                                         translation,
                                                         Translation.STATUS_CHANGED);
                    commandConnection.addChild(commandTranslation);
                } else {
                    commandTranslation.setText(translation);
                    commandTranslation.setStatus(Translation.STATUS_CHANGED);
                }
            }
        }
    }

    private void closeButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_closeButtonPressed
    {//GEN-HEADEREND:event_closeButtonPressed
        onApply();
        setVisible(false);
    }//GEN-LAST:event_closeButtonPressed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        onApply();
        setVisible(false);
        translatedArea.requestFocusInWindow();
    }//GEN-LAST:event_closeDialog

private void suggCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suggCancelButtonActionPerformed
    suggestionDialog.setVisible(false);
}//GEN-LAST:event_suggCancelButtonActionPerformed

private void suggOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suggOkButtonActionPerformed
    int i = this.suggList.getSelectedIndex();
    if (i != -1) {
        Phrase p = pl.get(i);
        setNextSuggestion(p);
    }
    suggestionDialog.setVisible(false);
}//GEN-LAST:event_suggOkButtonActionPerformed

private void suggestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_suggestionButtonActionPerformed
    suggestionDialog.getRootPane().setDefaultButton(suggOkButton);
    GuiTools.placeFrameAtCenter(suggestionDialog);           
    suggestionDialog.repaint();
    suggestionDialog.pack();
    suggestionDialog.setVisible(true);
}//GEN-LAST:event_suggestionButtonActionPerformed

    /**
     * Shows the EditPhrase dialog
     * @param curPhrase the current Phrase
     * @param l10n the locale to show for translated content
     * @param selIndex the selected index in the associated JTable
     * @param maxIndex the maximum index in the associated JTable
     * @param mf the MozFrame which holds the JTable
     */
    public void showDialog(Phrase curPhrase, String l10n, int selIndex, int maxIndex, MozFrame mf) {
        this.maxIndex = maxIndex;
        currentIndex = selIndex;
        this.currentPhrase = curPhrase;
        this.l10n = l10n;
        frame = mf;
        loadPhrase();

        if (currentIndex == 0) {
            prevButton.setEnabled(false);
        } else {
            prevButton.setEnabled(true);
        }

        if ((currentIndex + 1) < maxIndex) {
            nextButton.setEnabled(true);
        } else {
            nextButton.setEnabled(false);
        }
        
        if (!Kernel.settings.getBoolean(Settings.USE_SUGGESTIONS)) {
            suggestionButton.setEnabled(false);
        }

        translatedArea.requestFocusInWindow();
        setVisible(true);
    }


    /**
     * Loads the current phrase and fills every value in the Edit Phrase dialog
     */
    public void loadPhrase() {
        Translation currentTranslation;
        // Get Information
        String[] parentList = {"", "", "", "", "", "", "", "", "", ""};
        currentPhrase.fillParentArray(parentList);

        currentTranslation = (Translation) currentPhrase.getChildByName(l10n);
        
        // Include phrase name in dialog title
        setTitle("Edit phrase - " + currentPhrase.getName());

        // Advanced panel
        advInfoPhraseField.setText(currentPhrase.getName());
        advInfoFileField.setText(parentList[TreeNode.LEVEL_FILE]);
        advInfoComponentFieldl.setText(parentList[TreeNode.LEVEL_COMPONENT]);
        advInfoContainerField.setText(parentList[TreeNode.LEVEL_PRODUCTCHILD]);
        advInfoProductField.setText(parentList[TreeNode.LEVEL_PRODUCT]);

        accessConnection = currentPhrase.getAccessConnection();
        commandConnection = currentPhrase.getCommandConnection();
        Translation accessTranslation = null;
        Translation commandTranslation = null;
        if (accessConnection != null) {
            advInfoAccessField.setText(accessConnection.getName());
            advOrgAccessField.setText(accessConnection.getText());
            accessTranslation = (Translation) accessConnection.getChildByName(l10n);

            if (accessTranslation != null) {
                advTransAccessField.setText(accessTranslation.getText());
            } else {
                advTransAccessField.setText("");
            }
            advTransAccessField.setEnabled(true);
            advTransAccessField.setEditable(true);
        } else {
            advInfoAccessField.setText("Nothing found");
            advOrgAccessField.setText("");
            advTransAccessField.setText("");
            advTransAccessField.setEnabled(false);
            advTransAccessField.setEditable(false);
        }


        if (commandConnection != null) {
            advInfoCommandField.setText(commandConnection.getName());
            advOrgCommandField.setText(commandConnection.getText());
            commandTranslation =  (Translation) commandConnection.getChildByName(l10n);

            if (commandTranslation != null) {
                advTransCommandField.setText(commandTranslation.getText());
            } else {
                advTransCommandField.setText("");
            }
            advTransCommandField.setEnabled(true);
            advTransCommandField.setEditable(true);
        } else {
            advInfoCommandField.setText("Nothing found");
            advOrgCommandField.setText("");
            advTransCommandField.setText("");
            advTransCommandField.setEnabled(false);
            advTransCommandField.setEditable(false);
        }

        // Basic panel
        originalLabel.setText("Original");
        keepCheck.setSelected(currentPhrase.isKeepOriginal());
        originalArea.setText(currentPhrase.getText());
        showingOriginal = true;
        
        switchONButton.setEnabled((currentPhrase.getLocalizationNote() != null));
        
        if (currentTranslation != null) {
            translatedArea.setText(currentTranslation.getText());
            advTransCommentField.setText(currentTranslation.getComment());
            advTransstatusCombo.setSelectedItem(StatusCell.lookupStatusCell(
                    currentTranslation.getStatus()));
        } else {
            translatedArea.setText("");
            advTransCommentField.setText("");
            advTransstatusCombo.setSelectedIndex(0);
        }

        // QA panel
        if (currentPhrase.getFilterResult() == null) {
            qaresultTextArea.setText("");
        } else {
            qaresultTextArea.setText(currentPhrase.getFilterResult());
        }
        
        if (Kernel.settings.getBoolean(Settings.USE_SUGGESTIONS)) {
            pl = Kernel.ts.suggestionsForPhrase(currentPhrase, this.l10n, true);
            
            if ((pl != null) && (pl.size() > 0)) {
                suggList.setModel(pl);
                suggestionButton.setIcon(bulbIcon);
                suggestionButton.setText("0/" + pl.size());
                suggestionButton.setEnabled(true);
            } else {
                suggestionButton.setIcon(null);
                suggestionButton.setText("0/0");
                suggestionButton.setEnabled(false);
            }
        }
    }

    private void initUndoManager(JTextComponent textcomp) {
        final UndoManager undo = new UndoManager();
        Document doc = textcomp.getDocument();

        textcomp.setToolTipText("Use Ctrl+Z for Undo, Ctrl+Y for Redo");

        // Listen for undo and redo events
        doc.addUndoableEditListener(new UndoableEditListener() {
            @Override
            public void undoableEditHappened(UndoableEditEvent evt) {
                undo.addEdit(evt.getEdit());
            }
        });

        // Create an undo action and add it to the text component
        textcomp.getActionMap().put("Undo",
                new AbstractAction("Undo") {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (undo.canUndo()) {
                        undo.undo();
                    }
                } catch (CannotUndoException e) {
                }
            }
        });

        // Bind the undo action to ctl-Z
        textcomp.getInputMap().put(KeyStroke.getKeyStroke("control Z"), "Undo");

        // Create a redo action and add it to the text component
        textcomp.getActionMap().put("Redo",
                new AbstractAction("Redo") {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try {
                    if (undo.canRedo()) {
                        undo.redo();
                    }
                } catch (CannotRedoException e) {
                }
            }
        });

        // Bind the redo action to ctl-Y
        textcomp.getInputMap().put(KeyStroke.getKeyStroke("control Y"), "Redo");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField advInfoAccessField;
    private javax.swing.JLabel advInfoAccessLabel;
    private javax.swing.JTextField advInfoCommandField;
    private javax.swing.JLabel advInfoCommandLabel;
    private javax.swing.JTextField advInfoComponentFieldl;
    private javax.swing.JLabel advInfoComponentLabel;
    private javax.swing.JTextField advInfoContainerField;
    private javax.swing.JLabel advInfoContainerLabel;
    private javax.swing.JTextField advInfoFileField;
    private javax.swing.JLabel advInfoFileLabel;
    private javax.swing.JPanel advInfoPanel;
    private javax.swing.JTextField advInfoPhraseField;
    private javax.swing.JLabel advInfoPhraseLabel;
    private javax.swing.JTextField advInfoProductField;
    private javax.swing.JLabel advInfoProductLabel;
    private javax.swing.JTextField advOrgAccessField;
    private javax.swing.JLabel advOrgAccessLabel;
    private javax.swing.JTextField advOrgCommandField;
    private javax.swing.JLabel advOrgCommandLabel;
    private javax.swing.JPanel advOrgPanel;
    private javax.swing.JTextField advTransAccessField;
    private javax.swing.JLabel advTransAccessLabel;
    private javax.swing.JTextField advTransCommandField;
    private javax.swing.JLabel advTransCommandLabel;
    private javax.swing.JTextField advTransCommentField;
    private javax.swing.JLabel advTransCommentLabel;
    private javax.swing.JPanel advTransPanel;
    private javax.swing.JLabel advTransStatusLabel;
    private javax.swing.JComboBox advTransstatusCombo;
    private javax.swing.JPanel advancedPanel;
    private javax.swing.JButton basicClearButton;
    private javax.swing.JPanel basicPanel;
    private javax.swing.JSplitPane basicSplitpane;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel commandPanel;
    private javax.swing.JButton copyButton;
    private javax.swing.JCheckBox keepCheck;
    private javax.swing.JPanel lowersplitPanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JPanel okclosePanel;
    private javax.swing.JTextArea originalArea;
    private javax.swing.JLabel originalLabel;
    private javax.swing.JScrollPane originalScroll;
    private javax.swing.JButton prevButton;
    private javax.swing.JPanel prevnextPanel;
    private javax.swing.JPanel qaPanel;
    private javax.swing.JLabel qaresultLabel;
    private javax.swing.JScrollPane qaresultScrollPane;
    private javax.swing.JTextArea qaresultTextArea;
    private javax.swing.JButton resetButton;
    private javax.swing.JPanel suggButtonPanel;
    private javax.swing.JButton suggCancelButton;
    private javax.swing.JLabel suggDescLabel;
    private javax.swing.JList suggList;
    private javax.swing.JButton suggOkButton;
    private javax.swing.JScrollPane suggScrollPane;
    private javax.swing.JButton suggestionButton;
    private javax.swing.JDialog suggestionDialog;
    private javax.swing.JButton switchONButton;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JTextArea translatedArea;
    private javax.swing.JLabel translatedLabel;
    private javax.swing.JPanel translatedPanel;
    private javax.swing.JScrollPane translatedScroll;
    private javax.swing.JPanel uppersplitPanel;
    // End of variables declaration//GEN-END:variables

    private Phrase accessConnection;
    private Phrase commandConnection;
    private int currentIndex;
    private int maxIndex;
    private Phrase currentPhrase;
    private String l10n;
    private MozFrame frame;
    private boolean showingOriginal = true;
    private ThreeDotKeyAdapter tdka;
    private Font f;
    private PhraseList pl;
    private javax.swing.Icon bulbIcon = new javax.swing.ImageIcon(getClass().getResource("/org/mozillatranslator/resource/dialog-information.png"));
}
