/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 *  except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is MozillaTranslator (Mozilla Localization Tool)
 *
 * The Initial Developer of the Original Code is Henrik Lynggaard Hansen
 *
 * Portions created by Ricardo Palomares are
 * Copyright (C) Ricardo Palomares.
 * All Rights Reserved.
 *
 * Contributor(s):
 * Ricardo Palomares (Initial Code)
 *
 */


package org.mozillatranslator.gui.dialog;

import org.mozillatranslator.filter.ReplaceFilter;
import org.mozillatranslator.kernel.Kernel;
import org.mozillatranslator.kernel.Settings;
import org.mozillatranslator.util.*;

/**
 *
 * @author  rpalomares
 */
public class ReplaceDialog extends MozDialog {
    
    /** Creates new form ReplaceDialog */
    public ReplaceDialog() {
        super("Replace");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        infoPanel = new javax.swing.JPanel();
        replaceWhatLabel = new javax.swing.JLabel();
        replaceWithLabel = new javax.swing.JLabel();
        replaceWhatField = new javax.swing.JTextField();
        replaceWithField = new javax.swing.JTextField();
        origLabel = new javax.swing.JLabel();
        caseSenseCheck = new javax.swing.JCheckBox();
        exactContentCheck = new javax.swing.JCheckBox();
        origTextField = new javax.swing.JTextField();
        origRulesCombo = new javax.swing.JComboBox();
        localeLabel = new javax.swing.JLabel();
        localeField = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        infoPanel.setLayout(new java.awt.GridBagLayout());

        replaceWhatLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        replaceWhatLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        replaceWhatLabel.setText("Replace what:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(replaceWhatLabel, gridBagConstraints);

        replaceWithLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        replaceWithLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        replaceWithLabel.setText("Replace with:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(replaceWithLabel, gridBagConstraints);

        replaceWhatField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                replaceWhatFieldFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(replaceWhatField, gridBagConstraints);

        replaceWithField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                replaceWithFieldFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(replaceWithField, gridBagConstraints);

        origLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        origLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        origLabel.setText("Only if original text:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(origLabel, gridBagConstraints);

        caseSenseCheck.setFont(new java.awt.Font("Dialog", 0, 12));
        caseSenseCheck.setText("Case Sensitive");
        caseSenseCheck.setBorder(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(caseSenseCheck, gridBagConstraints);

        exactContentCheck.setFont(new java.awt.Font("Dialog", 0, 12));
        exactContentCheck.setText("Exact Match");
        exactContentCheck.setBorder(null);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(exactContentCheck, gridBagConstraints);

        origTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                origTextFieldFocusGained(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(origTextField, gridBagConstraints);

        origRulesCombo.setFont(new java.awt.Font("Dialog", 0, 12));
        origRulesCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "(Don't care)", "Contains", "Doesn't contain", "Is", "Is not" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(origRulesCombo, gridBagConstraints);

        localeLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        localeLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        localeLabel.setText("Locale:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(localeLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(localeField, gridBagConstraints);

        getContentPane().add(infoPanel, java.awt.BorderLayout.CENTER);

        okButton.setText("Ok");
        okButton.setMaximumSize(new java.awt.Dimension(75, 29));
        okButton.setMinimumSize(new java.awt.Dimension(75, 29));
        okButton.setPreferredSize(new java.awt.Dimension(75, 29));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.setMaximumSize(new java.awt.Dimension(75, 29));
        cancelButton.setMinimumSize(new java.awt.Dimension(75, 29));
        cancelButton.setPreferredSize(new java.awt.Dimension(75, 29));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_formWindowClosed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        okay = true;
        setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void replaceWhatFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_replaceWhatFieldFocusGained
        replaceWhatField.selectAll();
    }//GEN-LAST:event_replaceWhatFieldFocusGained

    private void replaceWithFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_replaceWithFieldFocusGained
        replaceWithField.selectAll();
    }//GEN-LAST:event_replaceWithFieldFocusGained

    private void origTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_origTextFieldFocusGained
        origTextField.selectAll();
    }//GEN-LAST:event_origTextFieldFocusGained

    @Override
    protected void init() {
        initComponents();
        JDialogHelper.setupOKCancelHotkeys(this, okButton, cancelButton);
        GuiTools.placeFrameAtCenter(this);        
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox caseSenseCheck;
    private javax.swing.JCheckBox exactContentCheck;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JTextField localeField;
    private javax.swing.JLabel localeLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel origLabel;
    private javax.swing.JComboBox origRulesCombo;
    private javax.swing.JTextField origTextField;
    private javax.swing.JTextField replaceWhatField;
    private javax.swing.JLabel replaceWhatLabel;
    private javax.swing.JTextField replaceWithField;
    private javax.swing.JLabel replaceWithLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    protected void populate() {
        localeField.setText(Kernel.settings.getString(Settings.STATE_L10N));
        replaceWhatField.setText(Kernel.settings.getString(Settings.STATE_SEARCH_STRING));
        caseSenseCheck.setSelected(Kernel.settings.getBoolean(Settings.STATE_SEARCH_CASE));
        exactContentCheck.setSelected(false);
    }

    @Override
    protected void collect() {
        String ln     = localeField.getText();
        String what   = replaceWhatField.getText();
        String to     = replaceWithField.getText();
        String orText = origTextField.getText();
        int origRule  = origRulesCombo.getSelectedIndex();
        boolean cs    = caseSenseCheck.isSelected();
        boolean exact = exactContentCheck.isSelected();
        
        Kernel.settings.setString(Settings.STATE_L10N, ln);
        Kernel.settings.setString(Settings.STATE_SEARCH_STRING, what);
        Kernel.settings.setBoolean(Settings.STATE_SEARCH_CASE, cs);
        data = new ReplaceFilter(ln, what, to, origRule, orText, cs, exact);
    }
    
}
