/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 *  except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is MozillaTranslator (Mozilla Localization Tool)
 *
 * The Initial Developer of the Original Code is Henrik Lynggaard Hansen
 *
 * Portions created by Henrik Lynggard Hansen are
 * Copyright (C) Henrik Lynggaard Hansen.
 * All Rights Reserved.
 *
 * Contributor(s):
 * Henrik Lynggaard Hansen (Initial Code)
 *
 */

package org.mozillatranslator.gui.dialog;

import org.mozillatranslator.io.common.FileUtils;
import org.mozillatranslator.kernel.*;
import org.mozillatranslator.datamodel.*;
import javax.swing.*;
import java.io.*;

/**
 *
 * @author  henrik
 */
public class BinaryEditDialog extends javax.swing.JDialog {
    private static final String NO_PIC_LOADED = "No picture loaded";
    
    /** Creates new form BinaryEditDialog */
    public BinaryEditDialog() {
        super(Kernel.mainWindow, true);
        initComponents();
        JDialogHelper.setupOKCancelHotkeys(this, okButton, cancelButton);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        mainPanel = new javax.swing.JPanel();
        splitPane = new javax.swing.JSplitPane();
        origPanel = new javax.swing.JPanel();
        mainOrig = new javax.swing.JPanel();
        origPicture = new javax.swing.JLabel();
        origButtonPanel = new javax.swing.JPanel();
        origSaveButton = new javax.swing.JButton();
        origPictureLabel = new javax.swing.JLabel();
        transPanel = new javax.swing.JPanel();
        mainTrans = new javax.swing.JPanel();
        transPicture = new javax.swing.JLabel();
        transButtonPanel = new javax.swing.JPanel();
        transLoadButton = new javax.swing.JButton();
        transSaveButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        transPictureLabel = new javax.swing.JLabel();
        okcancelPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        switchSplitButton = new javax.swing.JButton();

        setTitle("Edit Image");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        origPanel.setLayout(new java.awt.BorderLayout());

        origPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mozillatranslator/resource/mt_banner.gif")));
        mainOrig.add(origPicture);

        origPanel.add(mainOrig, java.awt.BorderLayout.CENTER);

        origSaveButton.setFont(new java.awt.Font("Dialog", 0, 12));
        origSaveButton.setText("Save");
        origSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                origSaveButtonPressed(evt);
            }
        });

        origButtonPanel.add(origSaveButton);

        origPanel.add(origButtonPanel, java.awt.BorderLayout.SOUTH);

        origPictureLabel.setText("Original Picture");
        origPanel.add(origPictureLabel, java.awt.BorderLayout.NORTH);

        splitPane.setLeftComponent(origPanel);

        transPanel.setLayout(new java.awt.BorderLayout());

        transPicture.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/mozillatranslator/resource/mt_banner.gif")));
        mainTrans.add(transPicture);

        transPanel.add(mainTrans, java.awt.BorderLayout.CENTER);

        transLoadButton.setFont(new java.awt.Font("Dialog", 0, 12));
        transLoadButton.setText("Load");
        transLoadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transLoadButtonPressed(evt);
            }
        });

        transButtonPanel.add(transLoadButton);

        transSaveButton.setFont(new java.awt.Font("Dialog", 0, 12));
        transSaveButton.setText("Save");
        transSaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transSaveButtonPressed(evt);
            }
        });

        transButtonPanel.add(transSaveButton);

        clearButton.setFont(new java.awt.Font("Dialog", 0, 12));
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonPressed(evt);
            }
        });

        transButtonPanel.add(clearButton);

        resetButton.setFont(new java.awt.Font("Dialog", 0, 12));
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonPressed(evt);
            }
        });

        transButtonPanel.add(resetButton);

        transPanel.add(transButtonPanel, java.awt.BorderLayout.SOUTH);

        transPictureLabel.setText("Translated Picture");
        transPanel.add(transPictureLabel, java.awt.BorderLayout.NORTH);

        splitPane.setRightComponent(transPanel);

        mainPanel.add(splitPane);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        okButton.setFont(new java.awt.Font("Dialog", 0, 12));
        okButton.setMnemonic('O');
        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonPressed(evt);
            }
        });

        okcancelPanel.add(okButton);

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 12));
        cancelButton.setMnemonic('C');
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonPressed(evt);
            }
        });

        okcancelPanel.add(cancelButton);

        switchSplitButton.setFont(new java.awt.Font("Dialog", 0, 12));
        switchSplitButton.setMnemonic('S');
        switchSplitButton.setText("Switch split direction");
        switchSplitButton.setToolTipText("Switch between horizontal split");
        switchSplitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchSplitButtonActionPerformed(evt);
            }
        });

        okcancelPanel.add(switchSplitButton);

        getContentPane().add(okcancelPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void switchSplitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchSplitButtonActionPerformed
        if (splitPane.getOrientation()==JSplitPane.HORIZONTAL_SPLIT) {
            splitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
        } else {
            splitPane.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
        }
        pack();
    }//GEN-LAST:event_switchSplitButtonActionPerformed
    
    private void cancelButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonPressed
    {//GEN-HEADEREND:event_cancelButtonPressed
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonPressed
    
    private void okButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonPressed
    {//GEN-HEADEREND:event_okButtonPressed
        okay = true;
        setVisible(false);
    }//GEN-LAST:event_okButtonPressed
    
    private void origSaveButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_origSaveButtonPressed
    {//GEN-HEADEREND:event_origSaveButtonPressed
        if (currentFile.getBinaryContent() != null) {
            File fileSelected;
            JFileChooser chooser = new JFileChooser(".");
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.setDialogTitle("Save original picture");
            int result = chooser.showSaveDialog(this);
            
            if (result == JFileChooser.APPROVE_OPTION) {
                try {
                    fileSelected = chooser.getSelectedFile();
                    FileOutputStream fos = new FileOutputStream(fileSelected);
                    FileUtils.saveFile(fos, currentFile.getBinaryContent());
                    fos.close();
                } catch (IOException e) {
                    Kernel.appLog.severe("Cannot save original picture " + e);
                    JOptionPane.showMessageDialog(Kernel.mainWindow,
                            "Cannot save original picture " + e,
                            "Error during save", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        
    }//GEN-LAST:event_origSaveButtonPressed
    
    private void resetButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_resetButtonPressed
    {//GEN-HEADEREND:event_resetButtonPressed
        tempTranslated = currentFile.getTranslatedContent();
        if (tempTranslated != null) {
            Icon transIcon = new ImageIcon(tempTranslated);
            transPicture.setIcon(transIcon);
            transPicture.setText(null);
        } else {
            transPicture.setIcon(null);
            transPicture.setText(BinaryEditDialog.NO_PIC_LOADED);
        }
    }//GEN-LAST:event_resetButtonPressed
    
    private void clearButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_clearButtonPressed
    {//GEN-HEADEREND:event_clearButtonPressed
        tempTranslated = null;
        transPicture.setIcon(null);
        transPicture.setText(BinaryEditDialog.NO_PIC_LOADED);
        
    }//GEN-LAST:event_clearButtonPressed
    
    private void transSaveButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_transSaveButtonPressed
    {//GEN-HEADEREND:event_transSaveButtonPressed
        if (tempTranslated != null) {
            File fileSelected;
            JFileChooser chooser = new JFileChooser(".");
            chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            chooser.setDialogTitle("Save translated picture");
            int result = chooser.showSaveDialog(this);
            
            if (result == JFileChooser.APPROVE_OPTION) {
                try {
                    fileSelected = chooser.getSelectedFile();
                    FileOutputStream fos = new FileOutputStream(fileSelected);
                    FileUtils.saveFile(fos, tempTranslated);
                    fos.close();
                } catch (IOException e) {
                    Kernel.appLog.severe("Cannot save translated picture " + e);
                    JOptionPane.showMessageDialog(Kernel.mainWindow,
                            "Cannot save translated picture " + e,
                            "Error during save", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_transSaveButtonPressed
    
    private void transLoadButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_transLoadButtonPressed
    {//GEN-HEADEREND:event_transLoadButtonPressed
        
        File fileSelected;
        JFileChooser chooser = new JFileChooser(".");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Load translated picture");
        int result = chooser.showOpenDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            try {
                fileSelected = chooser.getSelectedFile();
                FileInputStream fis = new FileInputStream(fileSelected);
                tempTranslated = FileUtils.loadFile(fis);
                fis.close();
            } catch (IOException e) {
                Kernel.appLog.severe("Cannot save original picture " + e);
                JOptionPane.showMessageDialog(Kernel.mainWindow,
                        "Cannot load translated picture " + e,
                        "Error during load", JOptionPane.ERROR_MESSAGE);
            }
            if (tempTranslated != null) {
                Icon transIcon = new ImageIcon(tempTranslated);
                transPicture.setIcon(transIcon);
                transPicture.setText(null);
            } else {
                transPicture.setIcon(null);
                transPicture.setText(BinaryEditDialog.NO_PIC_LOADED);
            }
        }
    }//GEN-LAST:event_transLoadButtonPressed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt)
    {//GEN-FIRST:event_closeDialog
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_closeDialog
    
    public boolean showDialog(BinaryFile curFile) {
        currentFile = curFile;
        if (curFile.getBinaryContent()!=null) {
            Icon origIcon = new ImageIcon(curFile.getBinaryContent());
            origPicture.setIcon(origIcon);
        } else {
            origPicture.setIcon(null);
            origPicture.setText("Picture not loaded");
        }
        tempTranslated = curFile.getTranslatedContent();
        if (tempTranslated != null) {
            Icon transIcon = new ImageIcon(tempTranslated);
            transPicture.setIcon(transIcon);
        } else {
            transPicture.setIcon(null);
            transPicture.setText(BinaryEditDialog.NO_PIC_LOADED);
        }
        setVisible(true);
        if (okay) {
            currentFile.setTranslatedContent(tempTranslated);
        }
        dispose();
        return true;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JPanel mainOrig;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JPanel mainTrans;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel okcancelPanel;
    private javax.swing.JPanel origButtonPanel;
    private javax.swing.JPanel origPanel;
    private javax.swing.JLabel origPicture;
    private javax.swing.JLabel origPictureLabel;
    private javax.swing.JButton origSaveButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JButton switchSplitButton;
    private javax.swing.JPanel transButtonPanel;
    private javax.swing.JButton transLoadButton;
    private javax.swing.JPanel transPanel;
    private javax.swing.JLabel transPicture;
    private javax.swing.JLabel transPictureLabel;
    private javax.swing.JButton transSaveButton;
    // End of variables declaration//GEN-END:variables
    private boolean okay;
    private byte[] tempTranslated;
    private BinaryFile currentFile;
}
