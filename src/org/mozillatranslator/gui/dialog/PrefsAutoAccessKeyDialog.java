/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 *  except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is MozillaTranslator (Mozilla Localization Tool)
 *
 * The Initial Developer of the Original Code is Henrik Lynggaard Hansen
 *
 * Portions created by Henrik Lynggard Hansen are
 * Copyright (C) Henrik Lynggaard Hansen.
 * All Rights Reserved.
 *
 * Contributor(s):
 * Ricardo Palomares (Initial Code)
 *
 */

package org.mozillatranslator.gui.dialog;

import org.mozillatranslator.kernel.Kernel;
import org.mozillatranslator.kernel.Settings;
import org.mozillatranslator.util.GuiTools;

/**
 * Preferences dialog for accesskeys auto-assignment feature
 * @author rpalomares
 */
public class PrefsAutoAccessKeyDialog extends MozDialog {

    /**
     * Default constructor
     */
    public PrefsAutoAccessKeyDialog() {
        super("Accesskeys autoassignment preferences");
    }

    @Override protected void init() {
        initComponents();
        JDialogHelper.setupOKCancelHotkeys(this, okButton, cancelButton);
        GuiTools.placeFrameAtCenter(this);        
    }

    @Override protected void populate() {
        keepExistingAKeysCheckBox.setSelected(
                Kernel.settings.getBoolean(Settings.AUTOAA_KEEP_EXISTING));
        considerOnlyFuzzyCheckBox.setSelected(
                Kernel.settings.getBoolean(Settings.AUTOAA_ONLY_FUZZIES));
        keepEnglishValueCheckBox.setSelected(
                Kernel.settings.getBoolean(Settings.AUTOAA_HONOR_ORIGINAL));
        charsAKeyListField.setText(
                Kernel.settings.getString(Settings.AUTOAA_CHAR_LIST));
        badCharsListField.setText(
                Kernel.settings.getString(Settings.AUTOAA_BAD_CHARS));
    }

    @Override protected void collect() {
        Kernel.settings.setBoolean(Settings.AUTOAA_KEEP_EXISTING,
                                   keepExistingAKeysCheckBox.isSelected());
        Kernel.settings.setBoolean(Settings.AUTOAA_ONLY_FUZZIES,
                                   considerOnlyFuzzyCheckBox.isSelected());
        Kernel.settings.setBoolean(Settings.AUTOAA_HONOR_ORIGINAL,
                                   keepEnglishValueCheckBox.isSelected());
        Kernel.settings.setString(Settings.AUTOAA_CHAR_LIST,
                                  charsAKeyListField.getText());
        Kernel.settings.setString(Settings.AUTOAA_BAD_CHARS,
                                  badCharsListField.getText());
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        keepExistingAKeysCheckBox = new javax.swing.JCheckBox();
        considerOnlyFuzzyCheckBox = new javax.swing.JCheckBox();
        keepEnglishValueCheckBox = new javax.swing.JCheckBox();
        charsAKeyListLabel = new javax.swing.JLabel();
        charsAKeyListField = new javax.swing.JTextField();
        badCharsListLabel = new javax.swing.JLabel();
        badCharsListField = new javax.swing.JTextField();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        keepExistingAKeysCheckBox.setMnemonic('K');
        keepExistingAKeysCheckBox.setText("Keep existing accesskeys");
        keepExistingAKeysCheckBox.setToolTipText("Do not modify existing values in accesskeys");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(keepExistingAKeysCheckBox, gridBagConstraints);

        considerOnlyFuzzyCheckBox.setMnemonic('C');
        considerOnlyFuzzyCheckBox.setText("Consider only Fuzzy entries");
        considerOnlyFuzzyCheckBox.setToolTipText("Auto assign only entries with Fuzzy flag, not every empty entry");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(considerOnlyFuzzyCheckBox, gridBagConstraints);

        keepEnglishValueCheckBox.setMnemonic('E');
        keepEnglishValueCheckBox.setText("Keep English values whenever possible");
        keepEnglishValueCheckBox.setToolTipText("Keep english accesskey if the character is also in the translated label (and the character is NOT in the bad char list)");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(keepEnglishValueCheckBox, gridBagConstraints);

        charsAKeyListLabel.setText("Accesskeys character list:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(charsAKeyListLabel, gridBagConstraints);

        charsAKeyListField.setText("1234567890ABCDEFGHKLMNOPQRSTUVWXYZJIabcdefhklmnoprsuvwxzt");
        charsAKeyListField.setToolTipText("Character list in preferenced order of assignments");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(charsAKeyListField, gridBagConstraints);

        badCharsListLabel.setText("Bad characters list:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(badCharsListLabel, gridBagConstraints);

        badCharsListField.setText("fijltrpgq");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(badCharsListField, gridBagConstraints);

        okButton.setText("OK");
        okButton.setMaximumSize(new java.awt.Dimension(55, 29));
        okButton.setPreferredSize(new java.awt.Dimension(55, 29));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(cancelButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        getContentPane().add(buttonPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        okay = false;
        setVisible(false);
}//GEN-LAST:event_formWindowClosed

private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        okay = true;
        setVisible(false);
}//GEN-LAST:event_okButtonActionPerformed

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        okay = false;
        setVisible(false);
}//GEN-LAST:event_cancelButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField badCharsListField;
    private javax.swing.JLabel badCharsListLabel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField charsAKeyListField;
    private javax.swing.JLabel charsAKeyListLabel;
    private javax.swing.JCheckBox considerOnlyFuzzyCheckBox;
    private javax.swing.JCheckBox keepEnglishValueCheckBox;
    private javax.swing.JCheckBox keepExistingAKeysCheckBox;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
}
