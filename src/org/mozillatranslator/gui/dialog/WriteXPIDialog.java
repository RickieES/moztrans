/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 *  except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is MozillaTranslator (Mozilla Localization Tool)
 *
 * The Initial Developer of the Original Code is Henrik Lynggaard Hansen
 *
 * Portions created by Henrik Lynggard Hansen are
 * Copyright (C) Henrik Lynggaard Hansen.
 * All Rights Reserved.
 *
 * Contributor(s):
 * Henrik Lynggaard Hansen (Initial Code)
 *
 */

package org.mozillatranslator.gui.dialog;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.mozillatranslator.dataobjects.WriteXpiDataObject;
import java.io.*;
import javax.swing.*;
import java.util.*;
import org.mozillatranslator.kernel.*;
import org.mozillatranslator.util.*;
import org.mozillatranslator.datamodel.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

/**
 *
 * @author  Henrik Lynggaard
 */
public class WriteXPIDialog extends MozDialog {
    /** Creates new form WriteXPIDialog */
    public WriteXPIDialog() {
        super("Export XPI");
        model = new WriteXPITableModel(this);
    }
    
    public String getFileName() {
        return fileField.getText();
    }
    public String getL10n() {
        return localeField.getText();
    }
    
    public WriteXPITableModel getTableModel() {
        return (WriteXPITableModel) table.getModel();
    }
    
    public String getVersion() {
        return versionField.getText();
    }
    
    public void setVersion(String version) {
        this.versionField.setText(version);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        localePanel = new javax.swing.JPanel();
        localeLabel = new javax.swing.JLabel();
        localeField = new javax.swing.JTextField();
        fileLabel = new javax.swing.JLabel();
        fileField = new javax.swing.JTextField();
        fileButton = new javax.swing.JButton();
        displayLabel = new javax.swing.JLabel();
        displayField = new javax.swing.JTextField();
        authorLabel = new javax.swing.JLabel();
        authorField = new javax.swing.JTextField();
        previewLabel = new javax.swing.JLabel();
        previewField = new javax.swing.JTextField();
        versionLabel = new javax.swing.JLabel();
        versionField = new javax.swing.JTextField();
        useExtZipCheck = new javax.swing.JCheckBox();
        tablePanel = new javax.swing.JPanel();
        tableScroll = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonPressed(evt);
            }
        });

        buttonPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonPressed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        infoPanel.setLayout(new java.awt.GridBagLayout());

        localePanel.setLayout(new java.awt.GridBagLayout());

        localePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose Locale"));
        localeLabel.setText("Locale");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        localePanel.add(localeLabel, gridBagConstraints);

        localeField.setText("jTextField1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        localePanel.add(localeField, gridBagConstraints);

        fileLabel.setText("File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        localePanel.add(fileLabel, gridBagConstraints);

        fileField.setText("jTextField2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        localePanel.add(fileField, gridBagConstraints);

        fileButton.setText("Choose");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonPressed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        localePanel.add(fileButton, gridBagConstraints);

        displayLabel.setText("display Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        localePanel.add(displayLabel, gridBagConstraints);

        displayField.setText("jTextField1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        localePanel.add(displayField, gridBagConstraints);

        authorLabel.setText("Author");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        localePanel.add(authorLabel, gridBagConstraints);

        authorField.setText("jTextField2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        localePanel.add(authorField, gridBagConstraints);

        previewLabel.setText("Preview URL");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        localePanel.add(previewLabel, gridBagConstraints);

        previewField.setText("jTextField3");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        localePanel.add(previewField, gridBagConstraints);

        versionLabel.setText("Version");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        localePanel.add(versionLabel, gridBagConstraints);

        versionField.setEditable(false);
        versionField.setText("versionField");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        localePanel.add(versionField, gridBagConstraints);

        useExtZipCheck.setMnemonic('U');
        useExtZipCheck.setText("Use external ZIP/UNZIP");
        useExtZipCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        useExtZipCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        localePanel.add(useExtZipCheck, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(localePanel, gridBagConstraints);

        tablePanel.setLayout(new java.awt.BorderLayout());

        tablePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Select platforms and regions"));
        tablePanel.setPreferredSize(new java.awt.Dimension(463, 229));
        table.setModel(model);
        tableScroll.setViewportView(table);

        tablePanel.add(tableScroll, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(tablePanel, gridBagConstraints);

        getContentPane().add(infoPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void cancelButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonPressed
    {//GEN-HEADEREND:event_cancelButtonPressed
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonPressed
    
    private void okButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonPressed
    {//GEN-HEADEREND:event_okButtonPressed
        okay = true;
        setVisible(false);
    }//GEN-LAST:event_okButtonPressed
    
    private void fileButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_fileButtonPressed
    {//GEN-HEADEREND:event_fileButtonPressed
        File defaultFile;
        JFileChooser chooser;
        int result;
        
        defaultFile = new File(fileField.getText());
        File f = defaultFile.isFile() ? defaultFile :
            new File(Kernel.settings.getString(Settings.GUI_EXPORT_FILE_CHOOSER_PATH));
        chooser = new JFileChooser(f);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Select XPI file to write to");
        chooser.setSelectedFile(defaultFile);
        result = chooser.showDialog(this, "Choose");
        if (result == JFileChooser.APPROVE_OPTION) {
            Kernel.settings.setString(Settings.GUI_EXPORT_FILE_CHOOSER_PATH,
                    chooser.getCurrentDirectory().getAbsolutePath());
            defaultFile = chooser.getSelectedFile();
            fileField.setText(defaultFile.toString());
        }
    }//GEN-LAST:event_fileButtonPressed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_closeDialog
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField authorField;
    private javax.swing.JLabel authorLabel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTextField displayField;
    private javax.swing.JLabel displayLabel;
    private javax.swing.JButton fileButton;
    private javax.swing.JTextField fileField;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JTextField localeField;
    private javax.swing.JLabel localeLabel;
    private javax.swing.JPanel localePanel;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField previewField;
    private javax.swing.JLabel previewLabel;
    private javax.swing.JTable table;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JScrollPane tableScroll;
    private javax.swing.JCheckBox useExtZipCheck;
    private javax.swing.JTextField versionField;
    private javax.swing.JLabel versionLabel;
    // End of variables declaration//GEN-END:variables
    private WriteXPITableModel model;
    
    private void getJarDataObject(List childs, WriteXPITableModel model, int type) {
        WriteXPITableModelRow currentRow;
        Iterator rowIterator;
        boolean midResult;
        ProductChild child;
        Product prod;
        
        rowIterator = model.iterator();
        while (rowIterator.hasNext()) {
            currentRow = (WriteXPITableModelRow) rowIterator.next();
            prod = currentRow.getNode();
            midResult = false;
            child = null;
            switch (type) {
                case ProductChild.TYPE_NEUTRAL:
                    midResult = currentRow.isNeutral();
                    child = prod.getChildByType(ProductChild.TYPE_NEUTRAL);
                    break;
                case ProductChild.TYPE_WINDOWS:
                    midResult = currentRow.isWindows();
                    child = prod.getChildByType(ProductChild.TYPE_WINDOWS);
                    break;
                case ProductChild.TYPE_UNIX:
                    midResult  = currentRow.isUnix();
                    child = prod.getChildByType(ProductChild.TYPE_UNIX);
                    break;
                case ProductChild.TYPE_MAC:
                    midResult = currentRow.isMac();
                    child = prod.getChildByType(ProductChild.TYPE_MAC);
                    break;
                case ProductChild.TYPE_REGION:
                    midResult = currentRow.isRegion();
                    child = prod.getChildByType(ProductChild.TYPE_REGION);
                    break;
                case ProductChild.TYPE_CUSTOM:
                    midResult = currentRow.isCustom();
                    child = prod.getChildByType(ProductChild.TYPE_CUSTOM);
                    break;
            }
            if (midResult && child != null) {
                childs.add(child);
            }
        }
    }
    
    protected void collect() {
        Kernel.settings.setString(Settings.STATE_XPI_FILE, fileField.getText());
        Kernel.settings.setString(Settings.STATE_L10N, localeField.getText());
        Kernel.settings.setString(Settings.STATE_DISPLAY, displayField.getText());
        Kernel.settings.setString(Settings.STATE_AUTHOR, authorField.getText());
        Kernel.settings.setString(Settings.STATE_PREVIEW, previewField.getText());
        
        WriteXpiDataObject dao = new WriteXpiDataObject();
        List currentList = null;
        dao.setL10n(localeField.getText());
        dao.setDisplay(displayField.getText());
        dao.setAuthor(authorField.getText());
        dao.setPreviewUrl(previewField.getText());
        dao.setFileName(fileField.getText());
        dao.setVersion(versionField.getText());
        dao.setUseExternalZIP(useExtZipCheck.isSelected());
        
        for (int i = 1; i < 7; i++) {
            switch (i) {
                case ProductChild.TYPE_NEUTRAL:
                    currentList = dao.getNeutrals();
                    break;
                case ProductChild.TYPE_WINDOWS:
                    currentList = dao.getWindows();
                    break;
                case ProductChild.TYPE_UNIX:
                    currentList = dao.getUnixes();
                    break;
                case ProductChild.TYPE_MAC:
                    currentList = dao.getMacs();
                    break;
                case ProductChild.TYPE_REGION:
                    currentList = dao.getRegions();
                    break;
                case ProductChild.TYPE_CUSTOM:
                    currentList = dao.getCustoms();
                    break;
            }
            getJarDataObject(currentList, model, i);
        }
        data = dao;
    }
    
    protected void init() {
        model.loadProducts();
        initComponents();
        
        JDialogHelper.setupOKCancelHotkeys(this, okButton, cancelButton);
        setSize(640, 480);
        GuiTools.placeFrameAtCenter(this);
    }
    
    protected void populate() {
        fileField.setText(Kernel.settings.getString(Settings.STATE_XPI_FILE));
        localeField.setText(Kernel.settings.getString(Settings.STATE_L10N));
        displayField.setText(Kernel.settings.getString(Settings.STATE_DISPLAY));
        authorField.setText(Kernel.settings.getString(Settings.STATE_AUTHOR));
        previewField.setText(Kernel.settings.getString(Settings.STATE_PREVIEW));
        
        String activeVersion = (String) model.getValueAt(0, WriteXPITableModel.COLUMN_VERSION);
        versionField.setText(activeVersion);
        useExtZipCheck.setSelected(Kernel.settings.getBoolean(Settings.USE_EXTERNAL_ZIP));
    }
    
    protected void reportVersionConflict() {
        JOptionPane.showMessageDialog(this,
                "<html><p>You can't select components from products with different version numbers.</p>" +
                "<p>Try deselecting other components first.</p></html>", "Conflicting version numbers error",
                JOptionPane.ERROR_MESSAGE);
    }
    
}
