/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 *  except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is MozillaTranslator (Mozilla Localization Tool)
 *
 * The Initial Developer of the Original Code is Henrik Lynggaard Hansen
 *
 * Portions created by Henrik Lynggard Hansen are
 * Copyright (C) Henrik Lynggaard Hansen.
 * All Rights Reserved.
 *
 * Contributor(s):
 * Henrik Lynggaard Hansen (Initial Code)
 *
 */

package org.mozillatranslator.gui.dialog;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.text.Position;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.mozillatranslator.datamodel.GenericFile;
import org.mozillatranslator.datamodel.TreeNode;
import org.mozillatranslator.io.FileTransferDialogDataObject;
import org.mozillatranslator.kernel.Kernel;
import org.mozillatranslator.kernel.Settings;
import org.mozillatranslator.util.GuiTools;


/**
 * Dialog to import/export files
 * @author  Henrik Lynggaard
 */
public class FileTransferDialog extends MozDialog {

    /** Creates new form ExportFileDialog
     * @param way a string to form the dialog title; either "Import" or "Export"
     * @param format either ImportExportDataObject.FORMAT_XML or
     *               ImportExportDataObject.FORMAT_MOZILLA; indicates whether
     *               to export to a special XML format or regular DTD/Properties
     *               it always import as MOZILLA format
     */
    public FileTransferDialog(String way, int format) {
        super(way + " file");
        this.format = format;
        this.way = way;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        javax.swing.JScrollPane exportScroll;
        javax.swing.JLabel fileLabel;
        java.awt.GridBagConstraints gridBagConstraints;

        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        exportLabel = new javax.swing.JLabel();
        exportScroll = new javax.swing.JScrollPane();
        exportTree = new JTree(Kernel.datamodel.getTree(TreeNode.LEVEL_FILE));
        fileLabel = new javax.swing.JLabel();
        fileField = new javax.swing.JTextField();
        fileButton = new javax.swing.JButton();
        localeLabel = new javax.swing.JLabel();
        localeField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        infoPanel.setLayout(new java.awt.GridBagLayout());

        exportLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        exportLabel.setText("Export");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(exportLabel, gridBagConstraints);

        exportTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                exportTreeValueChanged(evt);
            }
        });

        exportScroll.setViewportView(exportTree);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(exportScroll, gridBagConstraints);

        fileLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        fileLabel.setText("File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(fileLabel, gridBagConstraints);

        fileField.setText("jTextField2");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(fileField, gridBagConstraints);

        fileButton.setText("Choose");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(fileButton, gridBagConstraints);

        localeLabel.setText("Locale");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(localeLabel, gridBagConstraints);

        localeField.setText("jTextField1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        infoPanel.add(localeField, gridBagConstraints);

        getContentPane().add(infoPanel, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        TreePath tp = exportTree.getLeadSelectionPath();
        GenericFile gf = (GenericFile) ((DefaultMutableTreeNode)
                                        tp.getLastPathComponent()).getUserObject();

        if (fileField.getText().endsWith(gf.getName()) ||
                (JOptionPane.showConfirmDialog(this,
                 "Selected file to " + way.toLowerCase() + " (" + gf.getName()
                 + ") doesn't match disk filename.\n"
                 + "Have you typed/selected the right filename?",
                 "Possible mistyped filename",
                 JOptionPane.YES_NO_CANCEL_OPTION)==JOptionPane.YES_OPTION)) {
            okay = true;
            setVisible(false);            
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        File defaultFile;
        JFileChooser chooser;
        int result;

        defaultFile = new File(fileField.getText());
        File f = defaultFile.isFile() ? defaultFile :
            new File(Kernel.settings.getString(Settings.GUI_EXPORT_FILE_CHOOSER_PATH));
        chooser = new JFileChooser(f);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Select where to export to");
        chooser.setSelectedFile(defaultFile);
        result = chooser.showDialog(this, "Choose");
        if (result == JFileChooser.APPROVE_OPTION) {
            Kernel.settings.setString(Settings.GUI_EXPORT_FILE_CHOOSER_PATH,
                    chooser.getCurrentDirectory().getAbsolutePath());
            defaultFile = chooser.getSelectedFile();
            fileField.setText(defaultFile.toString());
        }
    }//GEN-LAST:event_fileButtonActionPerformed

    private void exportTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_exportTreeValueChanged
        adjustOkButton(evt.getNewLeadSelectionPath());
    }//GEN-LAST:event_exportTreeValueChanged

    private void adjustOkButton(TreePath tp) {
        DefaultMutableTreeNode chosen;
        Object ourObject;

        if (tp != null) {
            chosen = (DefaultMutableTreeNode) tp.getLastPathComponent();
            ourObject = chosen.getUserObject();
            if (ourObject instanceof GenericFile) {
                okButton.setEnabled(true);
            } else {
                okButton.setEnabled(false);
            }
        } else {
            okButton.setEnabled(false);
        }        
    }
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_closeDialog

    /**
     * Collects all relevant data for import/export operation from the dialog
     * and put it into the DAO object.
     */
    @Override
    protected void collect() {
        FileTransferDialogDataObject dao = new FileTransferDialogDataObject();
        TreePath tp = exportTree.getLeadSelectionPath();
        DefaultMutableTreeNode chosen = (DefaultMutableTreeNode) tp.getLastPathComponent();

        Kernel.settings.setString(Settings.STATE_L10N, localeField.getText());
        dao.setLocalization(localeField.getText());
        dao.setFileName(fileField.getText());
        dao.setChosenFile((GenericFile) chosen.getUserObject());
        dao.setFormat(format);
        data = dao;
    }

    /**
     * Initializes the dialog, center it in the screen, etc.
     */
    @Override
    protected void init() {
        initComponents();
        exportLabel.setText(way);
        setSize(640, 400);
        localeField.setEnabled(true);
        JDialogHelper.setupOKCancelHotkeys(this, okButton, cancelButton);
        GuiTools.placeFrameAtCenter(this);
        adjustOkButton(exportTree.getSelectionPath());
    }

    /**
     * Populate dialog with most recent data (reloads the tree), tries to keep
     * the previously selected node, and disables the OK button until an
     * appropiate node is chosen
     */
    @Override
    protected void populate() {
        int depth = 0; // Depth of the previously selected node
        String[] pathToSelectedObject;
        
        localeField.setText(Kernel.settings.getString(Settings.STATE_L10N));
        
        // Gets the selected node in the last dialog run
        TreePath tp = exportTree.getSelectionPath();
        if (tp != null) {
            depth = tp.getPathCount(); // How many depth levels was it from Root?
        }
        
        // Save the "names" of each level
        pathToSelectedObject = new String[depth];
        for(int i = 0; i < depth; i++) {
            pathToSelectedObject[i] = ((DefaultMutableTreeNode)
                    tp.getPathComponent(i)).getUserObject().toString();
        }
        
        // Now, re-create the tree model, just in case a file has been added or
        // removed
        exportTree.setModel(new
                DefaultTreeModel(Kernel.datamodel.getTree(TreeNode.LEVEL_FILE)));
        
        // Now, dig into the tree following the path by name
        tp = exportTree.getNextMatch("Root", 0, Position.Bias.Forward);
        for(int i = 1; i < depth; i++) {
            int startFrom;
            String rowLabel = "";

            // We need to expand the branch in order to getNextMatch to look into
            // it, just like if we were manually expanding the tree and looking
            // it up by name
            exportTree.expandPath(tp);

            while ((tp != null)
                    && (rowLabel.compareTo(pathToSelectedObject[i]) != 0)) {

                // Let's start search from the next row since last iteration
                startFrom = exportTree.getRowForPath(tp) + 1;
                tp = exportTree.getNextMatch(pathToSelectedObject[i], startFrom,
                                             Position.Bias.Forward);
                rowLabel = tp.getLastPathComponent().toString();
            }
        }
        
        // Now that we have the full TreePath (or it is null), set the selected
        // node and ensure it is visible
        exportTree.setSelectionPath(tp);
        exportTree.scrollPathToVisible(tp);
        okButton.setEnabled(false);
        fileField.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel exportLabel;
    private javax.swing.JTree exportTree;
    private javax.swing.JButton fileButton;
    private javax.swing.JTextField fileField;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JTextField localeField;
    private javax.swing.JLabel localeLabel;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables
    //private boolean okay;
    private String exportFile;
    private String l10n;
    private int format;
    private String way;
}
