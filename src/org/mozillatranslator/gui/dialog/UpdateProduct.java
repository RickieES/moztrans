/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 *  except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is MozillaTranslator (Mozilla Localization Tool)
 *
 * The Initial Developer of the Original Code is Henrik Lynggaard Hansen
 *
 * Portions created by Henrik Lynggard Hansen are
 * Copyright (C) Henrik Lynggaard Hansen.
 * All Rights Reserved.
 *
 * Contributor(s):
 * Henrik Lynggaard Hansen (Initial Code)
 * Ricardo Palomares (modifications to merge CVS Import Directory and Update
 *                    Product in a single option)
 */

package org.mozillatranslator.gui.dialog;

import java.io.File;
import javax.swing.*;
import org.mozillatranslator.kernel.*;
import org.mozillatranslator.datamodel.*;
import org.mozillatranslator.util.*;

/**
 *
 * @author  Henrik Lynggaard
 */
public class UpdateProduct extends javax.swing.JDialog {
    /**
     * Import/update the original strings
     */
    public static final int TYPE_IMPORT_ORIGINAL = 1;
    /**
     * Import the translated strings
     */
    public static final int TYPE_IMPORT_TRANSLATION = 2;
    /**
     * Export the translated strings
     */
    public static final int TYPE_EXPORT_TRANSLATION = 3;
    private boolean okay = false;
    private int typeAction;
    
    /** Creates new form UpdateProduct
     * @param title
     * @param typeAction 
     */
    public UpdateProduct(String title, int typeAction) {
        super(Kernel.mainWindow, title, true);
        this.typeAction = typeAction;
        initComponents();
        
        switch (typeAction) {
            case TYPE_IMPORT_ORIGINAL:
            case TYPE_IMPORT_TRANSLATION:
                repositoryPathLabel.setText("Repository Import Path");
                autoTrnsOrExportOnlyModifCheckBox.setText("Auto-translate after updating");
                autoTrnsOrExportOnlyModifCheckBox.setToolTipText("Run Auto-translate on new/modified strings");
                break;
            case TYPE_EXPORT_TRANSLATION:
                repositoryPathLabel.setText("Repository Export Path");
                autoTrnsOrExportOnlyModifCheckBox.setText("Export only modified files");
                autoTrnsOrExportOnlyModifCheckBox.setToolTipText("Export only files modified since last export");
                break;
        }
        JDialogHelper.setupOKCancelHotkeys(this, okButton, cancelButton);
        GuiTools.placeFrameAtCenter(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        infoPanel = new javax.swing.JPanel();
        productLabel = new javax.swing.JLabel();
        productCombo = new JComboBox(Kernel.datamodel.toArray());
        repositoryPathLabel = new javax.swing.JLabel();
        repositoryPathField = new javax.swing.JTextField();
        repositoryPathButton = new javax.swing.JButton();
        autoTrnsOrExportOnlyModifCheckBox = new javax.swing.JCheckBox();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        infoPanel.setLayout(new java.awt.GridBagLayout());

        productLabel.setDisplayedMnemonic('P');
        productLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        productLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        productLabel.setLabelFor(productCombo);
        productLabel.setText("Product");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(productLabel, gridBagConstraints);

        productCombo.setFont(new java.awt.Font("Dialog", 0, 12));
        productCombo.setMinimumSize(new java.awt.Dimension(120, 27));
        productCombo.setPreferredSize(new java.awt.Dimension(150, 27));
        productCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productComboActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(productCombo, gridBagConstraints);

        repositoryPathLabel.setDisplayedMnemonic('V');
        repositoryPathLabel.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        repositoryPathLabel.setLabelFor(repositoryPathField);
        repositoryPathLabel.setText("Repository Import Path");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(repositoryPathLabel, gridBagConstraints);

        repositoryPathField.setMinimumSize(new java.awt.Dimension(100, 27));
        repositoryPathField.setPreferredSize(new java.awt.Dimension(200, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(repositoryPathField, gridBagConstraints);

        repositoryPathButton.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        repositoryPathButton.setMnemonic('C');
        repositoryPathButton.setText("Choose");
        repositoryPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                repositoryPathButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(repositoryPathButton, gridBagConstraints);

        autoTrnsOrExportOnlyModifCheckBox.setText("Auto-translate or export modified");
        autoTrnsOrExportOnlyModifCheckBox.setToolTipText("Tooltip for autotrns or export only mod");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        infoPanel.add(autoTrnsOrExportOnlyModifCheckBox, gridBagConstraints);

        getContentPane().add(infoPanel, java.awt.BorderLayout.CENTER);

        okButton.setFont(new java.awt.Font("Dialog", 0, 12));
        okButton.setText("OK");
        okButton.setMaximumSize(new java.awt.Dimension(72, 27));
        okButton.setMinimumSize(new java.awt.Dimension(72, 27));
        okButton.setPreferredSize(new java.awt.Dimension(72, 27));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonPressed(evt);
            }
        });
        buttonPanel.add(okButton);

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 12));
        cancelButton.setText("Cancel");
        cancelButton.setDefaultCapable(false);
        cancelButton.setMaximumSize(new java.awt.Dimension(72, 27));
        cancelButton.setMinimumSize(new java.awt.Dimension(72, 27));
        cancelButton.setPreferredSize(new java.awt.Dimension(72, 27));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonPressed(evt);
            }
        });
        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void productComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productComboActionPerformed
        Product prod = (Product) productCombo.getSelectedItem();
        boolean isJarBased = ((prod.getNeutralPlatform().getJarFile() != null) &&
                (prod.getNeutralPlatform().getJarFile().length() > 0));
        
        repositoryPathField.setEnabled(!isJarBased);
        repositoryPathButton.setEnabled(!isJarBased);
        if (isJarBased) {
            repositoryPathField.setText("");
        } else {
            switch (typeAction) {
                case TYPE_IMPORT_ORIGINAL:
                    repositoryPathField.setText(prod.getCVSImportOriginalPath());
                    break;
                case TYPE_IMPORT_TRANSLATION:
                    repositoryPathField.setText(prod.getCVSImportTranslationPath());
                    break;
                case TYPE_EXPORT_TRANSLATION:
                    repositoryPathField.setText(prod.getCVSExportTranslationPath());
                    break;
            }
        }
    }//GEN-LAST:event_productComboActionPerformed
    
    private void repositoryPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_repositoryPathButtonActionPerformed
        File defaultFile;
        File f;
        JFileChooser chooser;
        Product prod;
        int result;
        
        prod = (Product) productCombo.getSelectedItem();
        defaultFile = new File(repositoryPathField.getText());
        if (defaultFile.isDirectory()) {
            f = defaultFile;
        } else {
            try {
                f = new File(prod.getCVSImportOriginalPath());
            } catch (java.lang.NullPointerException e) {
                f = new File("");
            }
        }
        
        chooser = new JFileChooser(f);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        switch (this.typeAction) {
            case UpdateProduct.TYPE_IMPORT_ORIGINAL:
            case UpdateProduct.TYPE_IMPORT_TRANSLATION:
                chooser.setDialogTitle("Select directory to import from");
                break;
            case UpdateProduct.TYPE_EXPORT_TRANSLATION:
                chooser.setDialogTitle("Select directory to export to");
                break;
        }
        
        result = chooser.showDialog(this, "Choose directory");
        if (result == JFileChooser.APPROVE_OPTION) {
            repositoryPathField.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_repositoryPathButtonActionPerformed
    
    private void okButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButtonPressed
    {//GEN-HEADEREND:event_okButtonPressed
        Product prod = (Product) productCombo.getSelectedItem();
        boolean isJarBased = ((prod.getNeutralPlatform().getJarFile() != null) &&
                              (prod.getNeutralPlatform().getJarFile().length() > 0));
        File selectedDir;
        
        if (isJarBased) {
            okay = true;
            setVisible(false);
        } else {
            try {
                selectedDir = new File(repositoryPathField.getText());
                okay = selectedDir.exists() && selectedDir.isDirectory();
            } catch (java.lang.NullPointerException e) {
                selectedDir = null;
                okay = false;
            }
            
            // If the path can be parsed as a valid dir, exists and is a directory
            if (okay) {
                setVisible(false);
            } else {
                JOptionPane.showMessageDialog(this, "You MUST enter a valid path!",
                        "Invalid path specified", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_okButtonPressed
    
    private void cancelButtonPressed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButtonPressed
    {//GEN-HEADEREND:event_cancelButtonPressed
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonPressed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_closeDialog
    
    /**
     * Shows the dialog
     * @return the selected product, if the user closed the dialog pressing OK;
     * null otherwise
     */
    public Product showDialog() {
        Product result = null;
        Settings set = Kernel.settings;
        
        productComboActionPerformed(null);
        autoTrnsOrExportOnlyModifCheckBox.setSelected(
                set.getBoolean((this.typeAction == UpdateProduct.TYPE_EXPORT_TRANSLATION) ?
                                Settings.EXPORT_ONLY_MODIFIED :
                                Settings.AUTOTRANSLATE_ON_UPDATE));
        setVisible(true);
        if (okay) {
            result = (Product) productCombo.getSelectedItem();
        }
        dispose();
        return result;
    }
    
    /**
     * Returns the import path provided by the user in the dialog
     * @return the import path provided by the user in the dialog
     */
    public String getCVSImportPath() {
        return repositoryPathField.getText();
    }

    /**
     * Returns the value of the Export Only Modified files flag
     * @return true if the user has chosen to export just modified files
     */
    public boolean exportOnlyModified() {
        return autoTrnsOrExportOnlyModifCheckBox.isSelected();
    }

    /**
     * Returns the value of the Run Auto-translate check box un updating
     * @return true if the user wants to run auto-translate on upate
     */
    public boolean isRunAutoTranslate() {
        return this.autoTrnsOrExportOnlyModifCheckBox.isSelected();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox autoTrnsOrExportOnlyModifCheckBox;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox productCombo;
    private javax.swing.JLabel productLabel;
    private javax.swing.JButton repositoryPathButton;
    private javax.swing.JTextField repositoryPathField;
    private javax.swing.JLabel repositoryPathLabel;
    // End of variables declaration//GEN-END:variables
}
