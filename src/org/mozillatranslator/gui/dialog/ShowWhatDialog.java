/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 *  except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is MozillaTranslator (Mozilla Localization Tool)
 *
 * The Initial Developer of the Original Code is Henrik Lynggaard Hansen
 *
 * Portions created by Henrik Lynggard Hansen are
 * Copyright (C) Henrik Lynggaard Hansen.
 * All Rights Reserved.
 *
 * Contributor(s):
 * Henrik Lynggaard Hansen (Initial Code)
 *
 */

package org.mozillatranslator.gui.dialog;

import java.util.*;
import javax.swing.*;
import org.mozillatranslator.kernel.*;
import org.mozillatranslator.util.*;
import org.mozillatranslator.gui.model.*;

/**
 *
 * @author  Henrik Lynggaard
 */
public class ShowWhatDialog extends javax.swing.JDialog {
    private boolean okay = false;
    private boolean doNotShow = false;

    /** Creates new form UpdateProduct */
    public ShowWhatDialog() {
        super(Kernel.mainWindow, "Show which columns", true);
        doNotShow = !Kernel.settings.getBoolean(Settings.GUI_SHOW_WHAT_DIALOG, true);

        initComponents();
        JDialogHelper.setupOKCancelHotkeys(this, okButton, cancelButton);
        GuiTools.placeFrameAtCenter(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        infoPanel = new javax.swing.JPanel();
        productLabel = new javax.swing.JLabel();
        localeLabel = new javax.swing.JLabel();
        localeField = new javax.swing.JTextField();
        columnScroll = new javax.swing.JScrollPane();
        columnList = new JList(ComplexColumnFactory.toArray());
        doNotShowCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setFont(new java.awt.Font("Dialog", 0, 12));
        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonPressed(evt);
            }
        });

        buttonPanel.add(okButton);

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 12));
        cancelButton.setText("Cancel");
        cancelButton.setDefaultCapable(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonPressed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        infoPanel.setLayout(new java.awt.GridBagLayout());

        productLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        productLabel.setText("Columns");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        infoPanel.add(productLabel, gridBagConstraints);

        localeLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        localeLabel.setText("Locale");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        infoPanel.add(localeLabel, gridBagConstraints);

        localeField.setText("jTextField1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        infoPanel.add(localeField, gridBagConstraints);

        columnList.setPrototypeCellValue("localization note plus more");
        columnList.setVisibleRowCount(15);
        columnScroll.setViewportView(columnList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 5);
        infoPanel.add(columnScroll, gridBagConstraints);

        doNotShowCheckBox.setFont(new java.awt.Font("Dialog", 0, 12));
        doNotShowCheckBox.setText("Do not show this dialog again");
        doNotShowCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doNotShowCheckBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        infoPanel.add(doNotShowCheckBox, gridBagConstraints);

        getContentPane().add(infoPanel, java.awt.BorderLayout.CENTER);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private void doNotShowCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doNotShowCheckBoxActionPerformed
        Kernel.settings.setBoolean(Settings.GUI_SHOW_WHAT_DIALOG, doNotShow);
        doNotShow = !doNotShow;
    }//GEN-LAST:event_doNotShowCheckBoxActionPerformed

    private void okButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonPressed
        if (checkFields()) {
            okay = true;
            setVisible(false);
        }
    }//GEN-LAST:event_okButtonPressed

    private void cancelButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonPressed
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonPressed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_closeDialog

    /** Checks if locale field has a value; otherwise, tell the user it is a
     *  mandatory field
     *
     * @return true if locale field has a value, false otherwise
     */
    public boolean checkFields() {
        boolean result = (localeField.getText().trim().length() > 1);
        
        if (!result) {
            JOptionPane.showMessageDialog(this, "Locale Field must be at least 2 chars long",
                    "Locale Field too short", JOptionPane.ERROR_MESSAGE);
            localeField.grabFocus();
        }
        return result;
    }
    
    public boolean showDialog() {
        int colMax = Kernel.settings.getInteger(Settings.COLUMN_COUNT, 1);
        int[] selectedFromStart;
        ListSelectionModel lsm = columnList.getSelectionModel();
        localeField.setText(Kernel.settings.getString(Settings.STATE_L10N));

        for (int i = 0; i < colMax; i++) {
          if (Kernel.settings.getBoolean(Settings.STATE_COLUMN + i)) {
            lsm.addSelectionInterval(i, i);
          }
        }

        if (doNotShow) {
          okay = true;
        } else {
          setVisible(true);
        }
        
        if (okay) {
            Kernel.settings.setString(Settings.STATE_L10N, localeField.getText());
            selectedFromStart = columnList.getSelectedIndices();

            for (int i = 0; i < colMax; i++) {
                Kernel.settings.setBoolean(Settings.STATE_COLUMN + i, false);
            }

            for (int i = 0; i < selectedFromStart.length; i++) {
                Kernel.settings.setBoolean(Settings.STATE_COLUMN + selectedFromStart[i], true);
            }
            Kernel.settings.setInteger(Settings.STATE_COLUMN_COUNT, selectedFromStart.length);
        }
        return okay;
    }

    public List getSelectedColumns() {
        Object[] arrayResult = columnList.getSelectedValues();
        return Arrays.asList(arrayResult);
    }

    public void disableLocaleField() {
        localeField.setEnabled(false);
    }

    public String getSelectedLocale() {
        return localeField.getText();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JList columnList;
    private javax.swing.JScrollPane columnScroll;
    private javax.swing.JCheckBox doNotShowCheckBox;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JTextField localeField;
    private javax.swing.JLabel localeLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel productLabel;
    // End of variables declaration//GEN-END:variables
}
