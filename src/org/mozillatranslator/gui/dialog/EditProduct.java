/*
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 *  except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is MozillaTranslator (Mozilla Localization Tool)
 *
 * The Initial Developer of the Original Code is Henrik Lynggaard Hansen
 *
 * Portions created by Henrik Lynggard Hansen are
 * Copyright (C) Henrik Lynggaard Hansen.
 * All Rights Reserved.
 *
 * Contributor(s):
 * Henrik Lynggaard Hansen (Initial Code)
 *
 */

package org.mozillatranslator.gui.dialog;

import java.awt.CardLayout;
import java.io.*;
import javax.swing.*;
import org.mozillatranslator.kernel.*;
import org.mozillatranslator.datamodel.*;
import org.mozillatranslator.util.*;

/**
 *
 * @author  Henrik Lynggaard
 * @version 1.0
 */
public class EditProduct extends JDialog {
    private Product prod;
    
    /** Creates new form ManageProducts */
    public EditProduct(Product p) {
        super(Kernel.mainWindow, "Edit Product", true);
        prod = p;
        initComponents();
        JDialogHelper.setupOKCancelHotkeys(this, okButton, cancelButton);
        GuiTools.placeFrameAtCenter(this);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        productTypeRG = new javax.swing.ButtonGroup();
        productPanel = new javax.swing.JPanel();
        basicPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        basicNameField = new javax.swing.JTextField();
        typeJarRadio = new javax.swing.JRadioButton();
        typeCvsRadio = new javax.swing.JRadioButton();
        prodPropPanel = new javax.swing.JPanel();
        jarPanel = new javax.swing.JPanel();
        neutralJarfileLabel = new javax.swing.JLabel();
        neutralJarfileField = new javax.swing.JTextField();
        neutralJarfileFilechose = new javax.swing.JButton();
        platformPlatformLabel = new javax.swing.JLabel();
        platformListScroll = new javax.swing.JScrollPane();
        platform_platformList = new JList(prod.platformArray());
        platformAddButton = new javax.swing.JButton();
        platformEditButton = new javax.swing.JButton();
        platformRemoveButton = new javax.swing.JButton();
        regionJarLabel = new javax.swing.JLabel();
        regionJarField = new javax.swing.JTextField();
        regionRegioncChoose = new javax.swing.JButton();
        customFilesLabel = new javax.swing.JLabel();
        customListScroll = new javax.swing.JScrollPane();
        custom_customList = new JList(prod.customArray());
        customAddButton = new javax.swing.JButton();
        customEditButton = new javax.swing.JButton();
        customRemoveButton = new javax.swing.JButton();
        justLocaleAbCDCheck = new javax.swing.JCheckBox();
        cvsPanel = new javax.swing.JPanel();
        cvsImportOriginalLabel = new javax.swing.JLabel();
        cvsExportTranslationLabel = new javax.swing.JLabel();
        cvsImportTranslationLabel = new javax.swing.JLabel();
        cvsImportOriginalField = new javax.swing.JTextField();
        cvsExportTranslationField = new javax.swing.JTextField();
        cvsImportTranslationField = new javax.swing.JTextField();
        cvsImportOriginalFilechoose = new javax.swing.JButton();
        cvsImportTranslationFilechoose = new javax.swing.JButton();
        cvsExportTranslationFilechoose = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                windowClose(evt);
            }
        });

        productPanel.setLayout(new java.awt.GridBagLayout());

        basicPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "General Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        basicPanel.setMinimumSize(new java.awt.Dimension(186, 96));
        basicPanel.setPreferredSize(new java.awt.Dimension(441, 96));
        basicPanel.setLayout(new java.awt.GridBagLayout());

        nameLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        nameLabel.setLabelFor(basicNameField);
        nameLabel.setText("Name");
        nameLabel.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        basicPanel.add(nameLabel, gridBagConstraints);

        basicNameField.setColumns(30);
        basicNameField.setText("name of product");
        basicNameField.setMinimumSize(new java.awt.Dimension(40, 27));
        basicNameField.setPreferredSize(new java.awt.Dimension(200, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        basicPanel.add(basicNameField, gridBagConstraints);

        productTypeRG.add(typeJarRadio);
        typeJarRadio.setFont(new java.awt.Font("Dialog", 0, 12));
        typeJarRadio.setMnemonic('b');
        typeJarRadio.setText("JAR based");
        typeJarRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        typeJarRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeJarRadioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        basicPanel.add(typeJarRadio, gridBagConstraints);

        productTypeRG.add(typeCvsRadio);
        typeCvsRadio.setFont(new java.awt.Font("Dialog", 0, 12));
        typeCvsRadio.setMnemonic('V');
        typeCvsRadio.setSelected(true);
        typeCvsRadio.setText("SCM based");
        typeCvsRadio.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        typeCvsRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeCvsRadioActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        basicPanel.add(typeCvsRadio, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        productPanel.add(basicPanel, gridBagConstraints);

        prodPropPanel.setMinimumSize(new java.awt.Dimension(441, 304));
        prodPropPanel.setPreferredSize(new java.awt.Dimension(441, 304));
        prodPropPanel.setLayout(new java.awt.CardLayout());

        jarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "JAR info panel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        jarPanel.setPreferredSize(new java.awt.Dimension(441, 285));
        jarPanel.setLayout(new java.awt.GridBagLayout());

        neutralJarfileLabel.setDisplayedMnemonic('N');
        neutralJarfileLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        neutralJarfileLabel.setLabelFor(neutralJarfileField);
        neutralJarfileLabel.setText("Platform Neutral JAR file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(neutralJarfileLabel, gridBagConstraints);

        neutralJarfileField.setColumns(30);
        neutralJarfileField.setText("jTextField1");
        neutralJarfileField.setMinimumSize(new java.awt.Dimension(40, 27));
        neutralJarfileField.setPreferredSize(new java.awt.Dimension(200, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(neutralJarfileField, gridBagConstraints);

        neutralJarfileFilechose.setFont(new java.awt.Font("Dialog", 0, 12));
        neutralJarfileFilechose.setText("Choose");
        neutralJarfileFilechose.setMaximumSize(new java.awt.Dimension(80, 25));
        neutralJarfileFilechose.setMinimumSize(new java.awt.Dimension(80, 25));
        neutralJarfileFilechose.setPreferredSize(new java.awt.Dimension(80, 25));
        neutralJarfileFilechose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                neutralJarfileFilechosePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(neutralJarfileFilechose, gridBagConstraints);

        platformPlatformLabel.setDisplayedMnemonic('P');
        platformPlatformLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        platformPlatformLabel.setLabelFor(platform_platformList);
        platformPlatformLabel.setText("Platform JAR files");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(platformPlatformLabel, gridBagConstraints);

        platformListScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        platformListScroll.setPreferredSize(new java.awt.Dimension(200, 86));

        platform_platformList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        platform_platformList.setPrototypeCellValue("Obscure unknown platform that is not mine");
        platformListScroll.setViewportView(platform_platformList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(platformListScroll, gridBagConstraints);

        platformAddButton.setFont(new java.awt.Font("Dialog", 0, 12));
        platformAddButton.setText("Add");
        platformAddButton.setMaximumSize(new java.awt.Dimension(80, 25));
        platformAddButton.setMinimumSize(new java.awt.Dimension(80, 25));
        platformAddButton.setPreferredSize(new java.awt.Dimension(80, 25));
        platformAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                platformAddButtonPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(platformAddButton, gridBagConstraints);

        platformEditButton.setFont(new java.awt.Font("Dialog", 0, 12));
        platformEditButton.setText("Edit");
        platformEditButton.setMaximumSize(new java.awt.Dimension(80, 25));
        platformEditButton.setMinimumSize(new java.awt.Dimension(80, 25));
        platformEditButton.setPreferredSize(new java.awt.Dimension(80, 25));
        platformEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                platformEditButtonPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(platformEditButton, gridBagConstraints);

        platformRemoveButton.setFont(new java.awt.Font("Dialog", 0, 12));
        platformRemoveButton.setText("Remove");
        platformRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                platformRemoveButtonPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(platformRemoveButton, gridBagConstraints);

        regionJarLabel.setDisplayedMnemonic('R');
        regionJarLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        regionJarLabel.setLabelFor(regionJarField);
        regionJarLabel.setText("Regional JAR file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jarPanel.add(regionJarLabel, gridBagConstraints);

        regionJarField.setColumns(30);
        regionJarField.setText("regional jar file");
        regionJarField.setMinimumSize(new java.awt.Dimension(40, 27));
        regionJarField.setPreferredSize(new java.awt.Dimension(200, 27));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jarPanel.add(regionJarField, gridBagConstraints);

        regionRegioncChoose.setFont(new java.awt.Font("Dialog", 0, 12));
        regionRegioncChoose.setText("Choose");
        regionRegioncChoose.setMaximumSize(new java.awt.Dimension(80, 25));
        regionRegioncChoose.setMinimumSize(new java.awt.Dimension(80, 25));
        regionRegioncChoose.setPreferredSize(new java.awt.Dimension(80, 25));
        regionRegioncChoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regionChoosePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(regionRegioncChoose, gridBagConstraints);

        customFilesLabel.setDisplayedMnemonic('u');
        customFilesLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        customFilesLabel.setLabelFor(custom_customList);
        customFilesLabel.setText("Custom files");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(customFilesLabel, gridBagConstraints);

        customListScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        customListScroll.setPreferredSize(new java.awt.Dimension(200, 86));

        custom_customList.setPrototypeCellValue("Obscure unknown platform that is not mine");
        customListScroll.setViewportView(custom_customList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(customListScroll, gridBagConstraints);

        customAddButton.setFont(new java.awt.Font("Dialog", 0, 12));
        customAddButton.setText("Add");
        customAddButton.setMaximumSize(new java.awt.Dimension(80, 25));
        customAddButton.setMinimumSize(new java.awt.Dimension(80, 25));
        customAddButton.setPreferredSize(new java.awt.Dimension(80, 25));
        customAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customAddButtonPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(customAddButton, gridBagConstraints);

        customEditButton.setFont(new java.awt.Font("Dialog", 0, 12));
        customEditButton.setText("Edit");
        customEditButton.setMaximumSize(new java.awt.Dimension(80, 25));
        customEditButton.setMinimumSize(new java.awt.Dimension(80, 25));
        customEditButton.setPreferredSize(new java.awt.Dimension(80, 25));
        customEditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customEditButtonPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(customEditButton, gridBagConstraints);

        customRemoveButton.setFont(new java.awt.Font("Dialog", 0, 12));
        customRemoveButton.setText("Remove");
        customRemoveButton.setMaximumSize(new java.awt.Dimension(80, 25));
        customRemoveButton.setMinimumSize(new java.awt.Dimension(80, 25));
        customRemoveButton.setPreferredSize(new java.awt.Dimension(80, 25));
        customRemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customRemoveButtonPressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(customRemoveButton, gridBagConstraints);

        justLocaleAbCDCheck.setFont(new java.awt.Font("Dialog", 0, 12));
        justLocaleAbCDCheck.setMnemonic('C');
        justLocaleAbCDCheck.setText("Consider files just under /locale/ab-CD/");
        justLocaleAbCDCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jarPanel.add(justLocaleAbCDCheck, gridBagConstraints);

        prodPropPanel.add(jarPanel, "jarPanel");

        cvsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CVS info panel", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Dialog", 0, 10))); // NOI18N
        cvsPanel.setMaximumSize(new java.awt.Dimension(800, 400));
        cvsPanel.setMinimumSize(new java.awt.Dimension(200, 120));
        cvsPanel.setPreferredSize(new java.awt.Dimension(441, 120));
        cvsPanel.setLayout(new java.awt.GridBagLayout());

        cvsImportOriginalLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        cvsImportOriginalLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cvsImportOriginalLabel.setLabelFor(cvsImportOriginalField);
        cvsImportOriginalLabel.setText("Import original");
        cvsImportOriginalLabel.setToolTipText("The path to be proposed when invoking Import -> CVS Directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        cvsPanel.add(cvsImportOriginalLabel, gridBagConstraints);

        cvsExportTranslationLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        cvsExportTranslationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        cvsExportTranslationLabel.setLabelFor(cvsExportTranslationField);
        cvsExportTranslationLabel.setText("Export translation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        cvsPanel.add(cvsExportTranslationLabel, gridBagConstraints);

        cvsImportTranslationLabel.setFont(new java.awt.Font("Dialog", 0, 12));
        cvsImportTranslationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        cvsImportTranslationLabel.setLabelFor(cvsImportTranslationField);
        cvsImportTranslationLabel.setText("Import translation");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        cvsPanel.add(cvsImportTranslationLabel, gridBagConstraints);

        cvsImportOriginalField.setText("/path/to/import");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        cvsPanel.add(cvsImportOriginalField, gridBagConstraints);

        cvsExportTranslationField.setText("/path/to/export");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        cvsPanel.add(cvsExportTranslationField, gridBagConstraints);

        cvsImportTranslationField.setText("/path/to/import");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        cvsPanel.add(cvsImportTranslationField, gridBagConstraints);

        cvsImportOriginalFilechoose.setFont(new java.awt.Font("Dialog", 0, 12));
        cvsImportOriginalFilechoose.setText("Choose");
        cvsImportOriginalFilechoose.setMaximumSize(new java.awt.Dimension(80, 25));
        cvsImportOriginalFilechoose.setMinimumSize(new java.awt.Dimension(80, 25));
        cvsImportOriginalFilechoose.setPreferredSize(new java.awt.Dimension(80, 25));
        cvsImportOriginalFilechoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cvsImportOriginalFilechooseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        cvsPanel.add(cvsImportOriginalFilechoose, gridBagConstraints);

        cvsImportTranslationFilechoose.setFont(new java.awt.Font("Dialog", 0, 12));
        cvsImportTranslationFilechoose.setText("Choose");
        cvsImportTranslationFilechoose.setMaximumSize(new java.awt.Dimension(80, 25));
        cvsImportTranslationFilechoose.setMinimumSize(new java.awt.Dimension(80, 25));
        cvsImportTranslationFilechoose.setPreferredSize(new java.awt.Dimension(80, 25));
        cvsImportTranslationFilechoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cvsImportTranslationFilechooseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        cvsPanel.add(cvsImportTranslationFilechoose, gridBagConstraints);

        cvsExportTranslationFilechoose.setFont(new java.awt.Font("Dialog", 0, 12));
        cvsExportTranslationFilechoose.setText("Choose");
        cvsExportTranslationFilechoose.setMaximumSize(new java.awt.Dimension(80, 25));
        cvsExportTranslationFilechoose.setMinimumSize(new java.awt.Dimension(80, 25));
        cvsExportTranslationFilechoose.setPreferredSize(new java.awt.Dimension(80, 25));
        cvsExportTranslationFilechoose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cvsExportTranslationFilechooseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        cvsPanel.add(cvsExportTranslationFilechoose, gridBagConstraints);

        prodPropPanel.add(cvsPanel, "cvsPanel");

        productPanel.add(prodPropPanel, new java.awt.GridBagConstraints());

        getContentPane().add(productPanel, java.awt.BorderLayout.CENTER);

        okButton.setFont(new java.awt.Font("Dialog", 0, 12));
        okButton.setText("OK");
        okButton.setMaximumSize(new java.awt.Dimension(80, 25));
        okButton.setMinimumSize(new java.awt.Dimension(80, 25));
        okButton.setPreferredSize(new java.awt.Dimension(80, 25));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonPressed(evt);
            }
        });
        buttonPanel.add(okButton);

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 12));
        cancelButton.setText("Cancel");
        cancelButton.setMaximumSize(new java.awt.Dimension(80, 25));
        cancelButton.setMinimumSize(new java.awt.Dimension(80, 25));
        cancelButton.setPreferredSize(new java.awt.Dimension(80, 25));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonPressed(evt);
            }
        });
        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void typeCvsRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeCvsRadioActionPerformed
        enableJarPanelFields(false);
    }//GEN-LAST:event_typeCvsRadioActionPerformed
    
    private void typeJarRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeJarRadioActionPerformed
        enableJarPanelFields(true);
    }//GEN-LAST:event_typeJarRadioActionPerformed
    
    private void cvsExportTranslationFilechooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cvsExportTranslationFilechooseActionPerformed
        File defaultFile;
        File f;
        JFileChooser chooser;
        int result;
        
        defaultFile = new File(cvsExportTranslationField.getText());
        if (defaultFile.isDirectory()) {
            f = defaultFile;
        } else {
            try {
                f = new File(prod.getCVSExportTranslationPath());
            } catch (java.lang.NullPointerException e) {
                f = new File("");
            }
        }
        
        chooser = new JFileChooser(f);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setDialogTitle("Select directory to export to");
        
        result = chooser.showDialog(this, "Choose directory");
        if (result == JFileChooser.APPROVE_OPTION) {
            cvsExportTranslationField.setText(chooser.getSelectedFile().
                    getAbsolutePath());
        }
    }//GEN-LAST:event_cvsExportTranslationFilechooseActionPerformed
    
    private void cvsImportTranslationFilechooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cvsImportTranslationFilechooseActionPerformed
        File defaultFile;
        File f;
        JFileChooser chooser;
        int result;
        
        defaultFile = new File(cvsImportTranslationField.getText());
        if (defaultFile.isDirectory()) {
            f = defaultFile;
        } else {
            try {
                f = new File(prod.getCVSImportTranslationPath());
            } catch (java.lang.NullPointerException e) {
                f = new File("");
            }
        }
        
        chooser = new JFileChooser(f);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setDialogTitle("Select directory to import from");
        
        result = chooser.showDialog(this, "Choose directory");
        if (result == JFileChooser.APPROVE_OPTION) {
            cvsImportTranslationField.setText(chooser.getSelectedFile().
                    getAbsolutePath());
        }
        
    }//GEN-LAST:event_cvsImportTranslationFilechooseActionPerformed
    
    private void cvsImportOriginalFilechooseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cvsImportOriginalFilechooseActionPerformed
        File defaultFile;
        File f;
        JFileChooser chooser;
        int result;
        
        defaultFile = new File(cvsImportOriginalField.getText());
        if (defaultFile.isDirectory()) {
            f = defaultFile;
        } else {
            try {
                f = new File(prod.getCVSImportOriginalPath());
            } catch (java.lang.NullPointerException e) {
                f = new File("");
            }
        }
        
        chooser = new JFileChooser(f);
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setDialogTitle("Select directory to import from");
        
        result = chooser.showDialog(this, "Choose directory");
        if (result == JFileChooser.APPROVE_OPTION) {
            cvsImportOriginalField.setText(chooser.getSelectedFile().
                    getAbsolutePath());
        }
    }//GEN-LAST:event_cvsImportOriginalFilechooseActionPerformed
    
    private void customRemoveButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customRemoveButtonPressed
        GenericFile cfile = (GenericFile) custom_customList.getSelectedValue();
        if (cfile != null) {
            int result = JOptionPane.showConfirmDialog(this, "Really remove: " +
                    cfile, "Remove Custom file", JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            
            if (result == JOptionPane.OK_OPTION) {
                cusCon.removeChild(cfile);
                custom_customList.setListData(cusCon.toArray());
            }
        }
    }//GEN-LAST:event_customRemoveButtonPressed
    
    private void customEditButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customEditButtonPressed
        GenericFile cfile = (GenericFile) custom_customList.getSelectedValue();
        if (cfile != null) {
            EditCustomFileDialog ecf = new EditCustomFileDialog(cfile);
            
            boolean efcOkay = ecf.showDialog();
            if (efcOkay) {
                cfile = FileFactory.changeType(cfile);
                cusCon.addChild(cfile);
                custom_customList.setListData(cusCon.toArray());
            }
        }
    }//GEN-LAST:event_customEditButtonPressed
    
    private void customAddButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customAddButtonPressed
        GenericFile cfile = FileFactory.createFile("", cusCon);
        
        EditCustomFileDialog ecf = new EditCustomFileDialog(cfile);
        
        if (ecf.showDialog()) {
            cfile = FileFactory.changeType(cfile);
            cusCon.addChild(cfile);
            custom_customList.setListData(cusCon.toArray());
        }
    }//GEN-LAST:event_customAddButtonPressed
    
    private void regionChoosePressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regionChoosePressed
        File defaultFile;
        JFileChooser chooser;
        int result;
        
        defaultFile = new File(regionJarField.getText());
        File f = defaultFile.isFile() ? defaultFile :
            new File(Kernel.settings.getString(
                Settings.GUI_IMPORT_FILE_CHOOSER_PATH));
        chooser = new JFileChooser(f);
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooser.setDialogTitle("Select Jar file to mount as region");
        chooser.setSelectedFile(f);
        
        result = chooser.showDialog(this, "Choose");
        if (result == JFileChooser.APPROVE_OPTION) {
            Kernel.settings.setString(Settings.GUI_IMPORT_FILE_CHOOSER_PATH,
                    chooser.getCurrentDirectory().getAbsolutePath());
            defaultFile = chooser.getSelectedFile();
            regionJarField.setText(defaultFile.toString());
        }
        
    }//GEN-LAST:event_regionChoosePressed
    
    private void platformRemoveButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_platformRemoveButtonPressed
        Platform plat = (Platform) platform_platformList.getSelectedValue();
        if (plat != null) {
            int result = JOptionPane.showConfirmDialog(this, "Really remove: " +
                    plat, "Remove platform", JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.WARNING_MESSAGE);
            
            if (result == JOptionPane.OK_OPTION) {
                prod.removeChild(plat);
                platform_platformList.setListData(prod.platformArray());
            }
        }
    }//GEN-LAST:event_platformRemoveButtonPressed
    
    private void platformEditButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_platformEditButtonPressed
        Platform plat = (Platform) platform_platformList.getSelectedValue();
        if (plat != null) {
            EditPlatformDialog ep = new EditPlatformDialog(plat);
            
            ep.showDialog();
        }
        
    }//GEN-LAST:event_platformEditButtonPressed
    
    private void platformAddButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_platformAddButtonPressed
        Platform plat = new Platform("", prod, ProductChild.TYPE_OTHER);
        EditPlatformDialog ep = new EditPlatformDialog(plat);
        
        if (ep.showDialog()) {
            prod.addChild(plat);
            platform_platformList.setListData(prod.platformArray());
        }
    }//GEN-LAST:event_platformAddButtonPressed
    
    private void windowClose(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClose
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_windowClose
    
    private void cancelButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonPressed
        okay = false;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonPressed
    
     private void okButtonPressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonPressed
         okay = true;
         setVisible(false);
     }//GEN-LAST:event_okButtonPressed
     
     private void neutralJarfileFilechosePressed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_neutralJarfileFilechosePressed
         File defaultFile;
         JFileChooser chooser;
         int result;
         
         defaultFile = new File(neutralJarfileField.getText());
         File f = defaultFile.isFile() ? defaultFile :
             new File(Kernel.settings.getString(
                 Settings.GUI_IMPORT_FILE_CHOOSER_PATH));
         chooser = new JFileChooser(f);
         chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
         chooser.setDialogTitle("Select Jar file to mount as platform neutral");
         chooser.setSelectedFile(defaultFile);
         
         result = chooser.showDialog(this, "Choose");
         if (result == JFileChooser.APPROVE_OPTION) {
             Kernel.settings.setString(Settings.GUI_IMPORT_FILE_CHOOSER_PATH,
                     chooser.getCurrentDirectory().getAbsolutePath());
             defaultFile = chooser.getSelectedFile();
             neutralJarfileField.setText(defaultFile.toString());
         }
    }//GEN-LAST:event_neutralJarfileFilechosePressed
     
    private void enableJarPanelFields(boolean enableFields) {
        // Enable/disable JAR info panel and its associated fields and buttons
        
        CardLayout cl = (CardLayout) (prodPropPanel.getLayout());
        if (enableFields) {
            cl.show(prodPropPanel, "jarPanel");
        } else {
            cl.show(prodPropPanel, "cvsPanel");
        }
        jarPanel.setEnabled(enableFields);
        neutralJarfileField.setEnabled(enableFields);
        neutralJarfileFilechose.setEnabled(enableFields);
        platformAddButton.setEnabled(enableFields);
        platformEditButton.setEnabled(enableFields);
        platformListScroll.setEnabled(enableFields);
        platformRemoveButton.setEnabled(enableFields);
        platform_platformList.setEnabled(enableFields);
        regionJarField.setEnabled(enableFields);
        regionRegioncChoose.setEnabled(enableFields);
        customAddButton.setEnabled(enableFields);
        customEditButton.setEnabled(enableFields);
        customListScroll.setEnabled(enableFields);
        customRemoveButton.setEnabled(enableFields);
        custom_customList.setEnabled(enableFields);
        
        enableFields = !enableFields;
        
        // Disable/enable CVS info panel and its associated fields and buttons
        cvsPanel.setEnabled(enableFields);
        cvsImportOriginalField.setEnabled(enableFields);
        cvsImportOriginalFilechoose.setEnabled(enableFields);
        cvsImportTranslationField.setEnabled(enableFields);
        cvsImportTranslationFilechoose.setEnabled(enableFields);
        cvsExportTranslationField.setEnabled(enableFields);
        cvsExportTranslationFilechoose.setEnabled(enableFields);
    }
     
    public boolean showDialog() {
        boolean isJarBased = ((prod.getNeutralPlatform().getJarFile() != null) &&
                              (prod.getNeutralPlatform().getJarFile().length() > 0));
        okay = false;
        
        // Setup dialog
        basicNameField.setText(prod.getName());
        neutralJarfileField.setText(prod.getNeutralPlatform().getJarFile());
        regionJarField.setText(prod.getRegional().getJarFile());
        cusCon = prod.getCustomContainer();
        cvsImportOriginalField.setText(prod.getCVSImportOriginalPath());
        cvsImportTranslationField.setText(prod.getCVSImportTranslationPath());
        cvsExportTranslationField.setText(prod.getCVSExportTranslationPath());
        justLocaleAbCDCheck.setSelected(prod.isOnlyLocaleAbCD());
        
        typeJarRadio.setSelected(isJarBased);
        typeCvsRadio.setSelected(!isJarBased);
        enableJarPanelFields(isJarBased);
        setVisible(true);
        
        if (okay) {
            // set the new parameters
            prod.setName(basicNameField.getText());
            prod.getNeutralPlatform().setJarFile(neutralJarfileField.getText());
            prod.getRegional().setJarFile(regionJarField.getText());
            prod.setCVSImportOriginalPath(cvsImportOriginalField.getText());
            prod.setCVSImportTranslationPath(cvsImportTranslationField.getText());
            prod.setCVSExportTranslationPath(cvsExportTranslationField.getText());
            prod.setOnlyLocaleAbCD(justLocaleAbCDCheck.isSelected());
        }
        dispose();
        return okay;
    }
     
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField basicNameField;
    private javax.swing.JPanel basicPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton customAddButton;
    private javax.swing.JButton customEditButton;
    private javax.swing.JLabel customFilesLabel;
    private javax.swing.JScrollPane customListScroll;
    private javax.swing.JButton customRemoveButton;
    private javax.swing.JList custom_customList;
    private javax.swing.JTextField cvsExportTranslationField;
    private javax.swing.JButton cvsExportTranslationFilechoose;
    private javax.swing.JLabel cvsExportTranslationLabel;
    private javax.swing.JTextField cvsImportOriginalField;
    private javax.swing.JButton cvsImportOriginalFilechoose;
    private javax.swing.JLabel cvsImportOriginalLabel;
    private javax.swing.JTextField cvsImportTranslationField;
    private javax.swing.JButton cvsImportTranslationFilechoose;
    private javax.swing.JLabel cvsImportTranslationLabel;
    private javax.swing.JPanel cvsPanel;
    private javax.swing.JPanel jarPanel;
    private javax.swing.JCheckBox justLocaleAbCDCheck;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField neutralJarfileField;
    private javax.swing.JButton neutralJarfileFilechose;
    private javax.swing.JLabel neutralJarfileLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JButton platformAddButton;
    private javax.swing.JButton platformEditButton;
    private javax.swing.JScrollPane platformListScroll;
    private javax.swing.JLabel platformPlatformLabel;
    private javax.swing.JButton platformRemoveButton;
    private javax.swing.JList platform_platformList;
    private javax.swing.JPanel prodPropPanel;
    private javax.swing.JPanel productPanel;
    private javax.swing.ButtonGroup productTypeRG;
    private javax.swing.JTextField regionJarField;
    private javax.swing.JLabel regionJarLabel;
    private javax.swing.JButton regionRegioncChoose;
    private javax.swing.JRadioButton typeCvsRadio;
    private javax.swing.JRadioButton typeJarRadio;
    // End of variables declaration//GEN-END:variables
    private boolean okay;
    private CustomContainer cusCon;
}
