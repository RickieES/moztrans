/*
 * EditImagePanel.java
 *
 * The contents of this file are subject to the Mozilla Public
 * License Version 1.1 (the "License"); you may not use this file
 *  except in compliance with the License. You may obtain a copy of
 * the License at http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS
 * IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or
 * implied. See the License for the specific language governing
 * rights and limitations under the License.
 *
 * The Original Code is MozillaTranslator (Mozilla Localization Tool)
 *
 * The Initial Developer of the Original Code is Henrik Lynggaard Hansen
 *
 * Portions created by Henrik Lynggard Hansen are
 * Copyright (C) Henrik Lynggaard Hansen.
 * All Rights Reserved.
 *
 * Contributor(s):
 * Tsahi Asher <tsahi_75@yahoo.com>
 *
 * Created on 7 December 2006, 19:27
 */

package org.mozillatranslator.gui;

//import java.util.Enumeration;
import java.awt.Window;
import java.util.List;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import org.mozillatranslator.datamodel.*;
import javax.swing.*;
import org.mozillatranslator.gui.model.ComplexTableModel;
import org.mozillatranslator.gui.model.FuzzyColumn;
import org.mozillatranslator.gui.model.KeepOriginalColumn;

/**
 * a panel to show original and translated image in the JSplitPane of ChromeView
 * @author Tsahi Asher
 * @version 1.4
 */
public class EditImagePanel extends javax.swing.JPanel {
  private BinaryFile currentFile; //original and target images
  private TranslatedImagePanel transImage;//translated image panel
  private List siblings;          //other nodes in the tree
  JTree tree;                     //the glossary tree
  TreeSelectionListener listener; //reference to listener class
  ComplexTableModel model;        //data model of a fake table for this image
  
  /**
   * Creates new form EditImagePanel
   *TODO: replace param tree with an event that next/previous buttons where clicked
   *and have ChromeView register itself on it
   *
   *@param file holds the original and translated image files
   *@param tree the glossary tree used in ChromeView
   *@param tModel the datamodel of the fake table for this image
   */  
  public EditImagePanel(BinaryFile file, JTree tree, ComplexTableModel tModel) {
      currentFile = file;
      this.tree = tree;
      model = tModel;
      initComponents();
      //keepCheck.setSelected(model.getRow(0).isKeepOriginal());
      byte[] origImageData = currentFile.getBinaryContent(); //original image
      splitPane.setTopComponent(new ImagePanel(origImageData));
      byte[] transImageData = currentFile.getTranslatedContent();
      transImage = new TranslatedImagePanel(transImageData);
      splitPane.setBottomComponent(transImage);
      listener = new TreeSelectionListener() {
            @Override
          public void valueChanged(TreeSelectionEvent e) {
              treeValueChanged(e);
          }
      }; //needed so we can remove it later
      tree.addTreeSelectionListener(listener);
      
//      model.addTableModelListener(new TableModelListener() {
//          public void tableChanged(TableModelEvent e) {
//              modelTableChanged(e);
//          }
//      });
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainScrollPane = new javax.swing.JScrollPane();
        splitPane = new javax.swing.JSplitPane();
        okCancelPanel = new javax.swing.JPanel();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        switchSplitButton = new javax.swing.JButton();
        fuzzyCheck = new javax.swing.JCheckBox();
        keepCheck = new javax.swing.JCheckBox();

        setLayout(new java.awt.BorderLayout());

        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitPane.setAutoscrolls(true);
        splitPane.setContinuousLayout(true);
        mainScrollPane.setViewportView(splitPane);

        add(mainScrollPane, java.awt.BorderLayout.CENTER);

        okCancelPanel.setLayout(new java.awt.GridBagLayout());

        okCancelPanel.setAlignmentY(10.0F);
        okCancelPanel.setMinimumSize(new java.awt.Dimension(495, 45));
        prevButton.setFont(new java.awt.Font("Dialog", 0, 12));
        prevButton.setMnemonic('P');
        prevButton.setText("Previous");
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        okCancelPanel.add(prevButton, gridBagConstraints);

        nextButton.setFont(new java.awt.Font("Dialog", 0, 12));
        nextButton.setMnemonic('N');
        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        okCancelPanel.add(nextButton, gridBagConstraints);

        switchSplitButton.setFont(new java.awt.Font("Dialog", 0, 12));
        switchSplitButton.setMnemonic('S');
        switchSplitButton.setText("Switch split direction");
        switchSplitButton.setToolTipText("Switch between horizontal split");
        switchSplitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchSplitButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 0, 2);
        okCancelPanel.add(switchSplitButton, gridBagConstraints);

        fuzzyCheck.setMnemonic('z');
        fuzzyCheck.setSelected(model.getRow(0).isFuzzy());
        fuzzyCheck.setText(new FuzzyColumn().getColumnName());
        fuzzyCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        fuzzyCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        fuzzyCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fuzzyCheckActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 1, 0);
        okCancelPanel.add(fuzzyCheck, gridBagConstraints);

        keepCheck.setMnemonic('K');
        keepCheck.setSelected(model.getRow(0).isKeepOriginal());
        keepCheck.setText(new KeepOriginalColumn().getColumnName());
        keepCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        keepCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        keepCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keepCheckActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(1, 2, 0, 0);
        okCancelPanel.add(keepCheck, gridBagConstraints);

        add(okCancelPanel, java.awt.BorderLayout.SOUTH);

    }// </editor-fold>//GEN-END:initComponents

    /**
     *handles the check event of the Keep Original checkbox, like the fuzzy flag.
     *
     *@param evt event
     */
    private void keepCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keepCheckActionPerformed
        model.getRow(0).setKeepOriginal(keepCheck.isSelected());
    }//GEN-LAST:event_keepCheckActionPerformed

    
    /**
     *handles the check event of the Fuzzy checkbox. sets the fuzzy flag in the
     *phrase representing this image according to the checkbox state.
     *@param evt event
     */
    private void fuzzyCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fuzzyCheckActionPerformed
        model.getRow(0).setFuzzy(fuzzyCheck.isSelected());
    }//GEN-LAST:event_fuzzyCheckActionPerformed

  /**
   *switchSplit button click event. switches the split direction between
   *horizontal and vertical.
   *@param evt event
   */
  private void switchSplitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchSplitButtonActionPerformed
    if (splitPane.getOrientation() == JSplitPane.HORIZONTAL_SPLIT) {
      splitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
    }
    else {
      splitPane.setOrientation(JSplitPane.HORIZONTAL_SPLIT);
    }
    ((Window) splitPane.getTopLevelAncestor()).pack();
  }//GEN-LAST:event_switchSplitButtonActionPerformed

  /**
   *next button click event. selects the next node in the glossary tree
   *@param evt event
   */
  private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
    //go next
    int selectedRows[] = tree.getSelectionRows();
    int limit = tree.getRowCount();
    if (selectedRows[0] < limit - 1) {
      tree.setSelectionRow(selectedRows[0] + 1);
      prevButton.setEnabled(true);
    }
    else {
      nextButton.setEnabled(false);
    }
  }//GEN-LAST:event_nextButtonActionPerformed

  /**
   *prevButton click event. selects the previous node in the glossary tree.
   *@param evt event
   */
  private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
    //go back
    int selectedRows[] = tree.getSelectionRows();
    if (selectedRows[0] > 0) {
      tree.setSelectionRow(selectedRows[0] - 1);
      nextButton.setEnabled(true);
    }
    else {
      prevButton.setEnabled(false);
    }
  }//GEN-LAST:event_prevButtonActionPerformed
  
  /**
   *set the translated image to what we have in the translated image panel
   */
  private void setImage() {
    currentFile.setTranslatedContent(transImage.getImageData());
  }
  
  /**
   *listener to valueChanged event of the tree on the other side of the splitpane
   *on ChromeView. when another node is selected, either by mouse or by clicking
   *a previous/next button, the image is saved and the listener is removed, to
   *prevent it from being called on subsequent events with other images/files
   *@param evt event
   */
  private void treeValueChanged(TreeSelectionEvent evt) {
    setImage();
    tree.removeTreeSelectionListener(listener);
  }
  
  /**
   * listener to TableChanged event of a fake table and tablemodel we have for
   * images. this is so that we can set and unset the fuzzy and keep flags of
   * images. here we only change the value of the checkbox, the actual value is
   * changed by RowBatchAction.
   *
   * @param evt event
   *
  private void modelTableChanged(TableModelEvent evt) {
      int colNum = evt.getColumn();
      if (model.getColumnName(colNum).equals(Kernel.translate("SetFuzzyOn.button"))) {
          fuzzyCheck.setSelected(true);
      }
      else if (model.getColumnName(
              colNum).equals(Kernel.translate("SetFuzzyOff.button"))) {
          fuzzyCheck.setSelected(false);
      }
  }*/
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox fuzzyCheck;
    private javax.swing.JCheckBox keepCheck;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JButton nextButton;
    private javax.swing.JPanel okCancelPanel;
    private javax.swing.JButton prevButton;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JButton switchSplitButton;
    // End of variables declaration//GEN-END:variables
  
}
